<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://www.brian-underwood.codes//feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.brian-underwood.codes//" rel="alternate" type="text/html" /><updated>2021-07-17T16:28:35+02:00</updated><id>http://www.brian-underwood.codes//feed.xml</id><title type="html">brian-underwood.blogs</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Brian Underwood</name></author><entry><title type="html">Why I Love Lodash</title><link href="http://www.brian-underwood.codes//javascript/2021/05/13/why-I-love-lodash" rel="alternate" type="text/html" title="Why I Love Lodash" /><published>2021-05-13T22:26:00+02:00</published><updated>2021-05-13T22:26:00+02:00</updated><id>http://www.brian-underwood.codes//javascript/2021/05/13/why-I-love-lodash</id><content type="html" xml:base="http://www.brian-underwood.codes//javascript/2021/05/13/why-I-love-lodash">&lt;p&gt;I love &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt;, but I’m not here to tell you to use Lodash.  It’s up to you to decide if a tool is useful for you or your project.  It will come down to the needs of the project (file size, browser/Node.js, how much you use it, etc…).  But my new team was surprised by my passion for it and so I wanted to share my thoughts.  Specifically: I want to focus in this post on those things which I like, including things which I think people often miss.&lt;/p&gt;

&lt;h2 id=&quot;checking-types&quot;&gt;Checking types&lt;/h2&gt;

&lt;p&gt;To start with something simple, let’s look at identifying variable types.  I’ll take the examples from &lt;a href=&quot;https://dev.to/jmitchell38488/it-s-time-to-let-go-of-lodash-221f&quot;&gt;this post&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of that works, technically, but it’s so inconsistent.  This is especially true of the third example checking if something is an object.  Such a check requires a deeper understanding of Javascript objects that not everybody has and it might not always be implemented correctly.&lt;/p&gt;

&lt;p&gt;Also, regarding the last example for checking boolean, I should admit that I lied a bit: it isn’t from the post I linked to!  The example they gave was: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean(foo)&lt;/code&gt;, but in the comments somebody pointed out that truthy values like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean(1)&lt;/code&gt; would return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.  For me, all of this is more complex and error prone than just doing:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With those, I’m a lot less likely to come back to my code later because of a bug due to my understanding of type checking.&lt;/p&gt;

&lt;h2 id=&quot;chaining&quot;&gt;Chaining&lt;/h2&gt;

&lt;p&gt;I very often have a need to transform a data structure in multiple steps:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Find adults, group by age (ten-year spans), and find if any in each group own a pet&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Jane Doe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groupedAdults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExistsForGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupedAdults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;groupedAdults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;petExistsForGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seem about what you expect from Javascript?  Maybe not the nicest bit of code in the world, but it does the job.  Good enough, right?  Let’s try using Lodash chaining, along with other helpers:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Jane Doe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExistsForGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s another way of thinking, right?  Shorter for sure, but also higher-level and more declarative.  The mechanics drop away and we’re left with our code business logic.&lt;/p&gt;

&lt;p&gt;This is one of the big things that I love about Lodash.  If you take the time to learn it, it allows you to work at a higher level, not worrying about small details.  For that reason I enjoy just browsing through the documentation sometimes, like browsing an IKEA catalog and thinking to myself “oooh, that could be nice…”.  It’s good to know what’s there, even if you’re not sure why you would use it.  I’ve found &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.partition&lt;/code&gt; surprisingly useful!&lt;/p&gt;

&lt;p&gt;Did I choose an example that plays to Lodash’s strengths?  Absolutely!  But I challenge anybody to make the first example shorter while still being readable using pure Javascript.&lt;/p&gt;

&lt;p&gt;It’s also worth mentioning that Lodash has methods which basically just duplicate the functionality of their javascript counterparts (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.concat&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.fill&lt;/code&gt;).  This maybe seems unnecessary to people who are skeptical of Lodash, but remember that because Lodash offers chaining it needs to provide all of the potential methods that you might use.&lt;/p&gt;

&lt;h2 id=&quot;iteratee-shorthand&quot;&gt;Iteratee shorthand&lt;/h2&gt;

&lt;p&gt;You may have noted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.some(adults, &apos;ownsPet&apos;)&lt;/code&gt; bit above.  By passing in a string instead of a function, Lodash automatically uses an identity function.  This would be the equivilent of: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.some(adults, (adult) =&amp;gt; adult.ownPet)&lt;/code&gt;.  True the second version isn’t much longer, but the first is more at-a-glance readable.&lt;/p&gt;

&lt;p&gt;But it doesn’t stop there!  You can use the string syntax for nested paths:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contactDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;123-456-7890&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;me@thingowner.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;owner.contactDetails.phoneNumber&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;owner.contactDetails.email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;me@thingowner.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ... more?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only does it provide a simple syntax for going deep, but if any step along the way doesn’t exist (say, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contactDetails&lt;/code&gt; field is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;), it will simply return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, similar to Javascript’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?.&lt;/code&gt; operator.&lt;/p&gt;

&lt;h2 id=&quot;javascript-as-the-write-it-yourself-language&quot;&gt;Javascript as the “write it yourself” language&lt;/h2&gt;

&lt;p&gt;Having been a Ruby programmer for a long time, I will often search for a way to manipulate some data in Ruby and very often there will by either a simple function to call or a discussion on how to write something concise but readable.  Whenever I’m working with Javascript, however, the answer very often seems to be either “write it yourself” or “copy a solution”.  Here is a small selection that I gathered relatively quickly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/45342155/how-to-subtract-one-array-from-another-element-wise-in-javascript&quot;&gt;How to subtract one array from another, element-wise, in javascript&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.difference&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4550505/getting-a-random-value-from-a-javascript-array&quot;&gt;Getting a random value from a JavaScript array&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values&quot;&gt;Sorting an array of objects by property values&lt;/a&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sortBy&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22015684/how-do-i-zip-two-arrays-in-javascript&quot;&gt;How do I zip two arrays in JavaScript?&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.zip&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes you’ll even get answers, like with &lt;a href=&quot;https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array&quot;&gt;How to randomize (shuffle) a JavaScript array?&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.shuffle&lt;/code&gt;) which talks about the ideal algorithm (the “Fisher-Yates (aka Knuth) Shuffle” in this case).  Academically I enjoy learning about different algorithms, but when I’m trying to get higher-level done I just want something that works well.  I’m not sure if the performance of my sorting / shuffling algorithm has ever been a practical concern.&lt;/p&gt;

&lt;p&gt;Some of these solutions are very complex, but some are pretty simple, even if they aren’t as simple as just calling a Lodash function.  So what’s so bad about using pure Javascript to zip two arrays?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem, as I see it, is that it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is not immediately obvious&lt;/li&gt;
  &lt;li&gt;is a distraction from the task that you’re trying to accomplish&lt;/li&gt;
  &lt;li&gt;leaves room for custom functions to be implemented in broken, odd, or inconsistent ways&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more time that I’ve spent programming, the less I trust myself and the more I trust open source solutions which have been developed and vetted by a community.  Also, most of my experience in programming comes from working in teams.  When working in teams the goal is for code to be readable and maintainable.  If you scatter the codebase with versions of functions that have been implemented over and over again elsewhere (almost certainly in a better way), you’re generally just spending extra time and slowing others down.&lt;/p&gt;

&lt;p&gt;Of course there’s nothing wrong with enjoying the challenge of writing your own algorithms!  I just think it’s much better done in https://exercism.io rather than your codebase.&lt;/p&gt;

&lt;h2 id=&quot;being-fair-to-javascript&quot;&gt;Being fair to Javascript&lt;/h2&gt;

&lt;p&gt;All of the above said, Javascript has come a long way in recent years.  Some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I love the fact that I can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: &apos;b&apos;, ...obj}&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.merge({a: &apos;b&apos;}, obj)&lt;/code&gt; (as long as it’s not part of a larger flow which works better as a Lodash chain)&lt;/li&gt;
  &lt;li&gt;I often want to return the unique items from an array, and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[...new Set(array)]&lt;/code&gt; provides a reasonably readable solution (if only slightly more verbose and less obvious than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.uniq(array)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;In ES2019 arrays now have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap()&lt;/code&gt; functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;Lodash is self-consistent and holistically designed.  “The principle of least astonishment” is a way to not get bogged down in details, be less prone to errors, and increase overall developer happiness.  When bringing in a new developer it’s easier for them to come up-to-speed quickly.&lt;/p&gt;

&lt;p&gt;And my favorite response to “You Don’t Need Lodash”:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I guess not, but I want it. &amp;quot;You don&amp;#39;t need Lodash/Underscore&amp;quot; &lt;a href=&quot;https://t.co/keLJ43U0pa&quot;&gt;https://t.co/keLJ43U0pa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tero Parviainen (@teropa) &lt;a href=&quot;https://twitter.com/teropa/status/692280179666898944?ref_src=twsrc%5Etfw&quot;&gt;January 27, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Brian Underwood</name></author><category term="javascript" /><category term="javascript" /><category term="lodash" /><summary type="html">I love Lodash, but I’m not here to tell you to use Lodash. It’s up to you to decide if a tool is useful for you or your project. It will come down to the needs of the project (file size, browser/Node.js, how much you use it, etc…). But my new team was surprised by my passion for it and so I wanted to share my thoughts. Specifically: I want to focus in this post on those things which I like, including things which I think people often miss.</summary></entry><entry><title type="html">Structuring an Elixir+Phoenix App</title><link href="http://www.brian-underwood.codes//elixir/2020/07/11/structuring-an-elixir+phoenix-app" rel="alternate" type="text/html" title="Structuring an Elixir+Phoenix App" /><published>2020-07-11T00:00:00+02:00</published><updated>2020-07-11T00:00:00+02:00</updated><id>http://www.brian-underwood.codes//elixir/2020/07/11/structuring-an-elixir+phoenix-app</id><content type="html" xml:base="http://www.brian-underwood.codes//elixir/2020/07/11/structuring-an-elixir+phoenix-app">&lt;p&gt;I’ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix phx.new&lt;/code&gt; ed many applications and when doing so I often start with wondering how to organize my code. I love how Phoenix pushes you to think about the different domains in your app via generators while at the same time I have the freedom to organize modules on my own. Ecto schemas make for a nice abstraction, but where should I put code related just to that table? It could be in the context, but I don’t want the context to become a “grab bag” of unorganized function calls.&lt;/p&gt;

&lt;p&gt;In the past, I’ve searched for someone writing on the subject but haven’t come up with much. I’ve even done some cursory glancing into repositories to get a feeling for what they do, but I’ve never looked thoroughly at different options. In this post, I share what I have found from four different open source Phoenix+Ecto applications. And as the old joke goes, I’ll be asking four developers for their opinions and getting four different answers. In the end, I’ll summarize how I plan to move forward.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;p&gt;Phoenix has evolved in how modules are organized, most notably splitting into &lt;a href=&quot;https://hexdocs.pm/phoenix/directory_structure.html#content&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app_web&lt;/code&gt;&lt;/a&gt; folders and with the concept of &lt;a href=&quot;https://hexdocs.pm/phoenix/contexts.html&quot;&gt;contexts&lt;/a&gt;. Some of these applications were created with early versions of Phoenix which could explain some of the differences.&lt;/p&gt;

&lt;p&gt;When I say “typical Ecto schema logic” below, I’m referring to examples in the &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.Schema.html&quot;&gt;Ecto documentation&lt;/a&gt; and the community on the things to put into schema files (field definitions, schema attributes (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@primary_key&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@schema_prefix&lt;/code&gt;, etc…), and changeset logic)&lt;/p&gt;

&lt;h2 id=&quot;avia&quot;&gt;Avia&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aviacommerce/avia/&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; “open source e-commerce framework”&lt;/p&gt;

&lt;p&gt;A lot of the business logic can be found under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/snitch_core/lib/core&lt;/code&gt;. There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; folder containing what appears to be the front-end API modules (what Phoenix might call “contexts”). Next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; folder is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; folder containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schema&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; directories.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schema&lt;/code&gt; directory contains typical Ecto schema files. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; directory contains correspondingly named modules with CRUD functions (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;) but also occasionally some helper functions related to those domain objects (functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formatted_list&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_all_by_shipping_category&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Each type of module also has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; statement at the top (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Snitch.Data.Model&lt;/code&gt;) referring to a module containing shared logic. It’s worth looking at what that shared logic is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # apps/snitch_core/lib/core/domain/domain.ex
    alias Ecto.Multi
    alias Snitch.Data.{Model, Schema}
    alias Snitch.Domain
    alias Snitch.Core.Tools.MultiTenancy.Repo

    # apps/snitch_core/lib/core/data/model/model.ex
    import Ecto.Query
    alias Snitch.Core.Tools.MultiTenancy.Repo
    alias Snitch.Tools
    alias Tools.Helper.Query, as: QH

    # apps/snitch_core/lib/core/data/schema/schema.ex
    use Ecto.Schema
    import Ecto.Changeset
    import Snitch.Tools.Validations
    alias Snitch.Core.Tools.MultiTenancy.Repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The domain modules alias the model modules and the model modules alias the schema modules, indicating the usage pattern of going deeper (Domain -&amp;gt; Model -&amp;gt; Schema):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # apps/snitch_core/lib/core/domain/stock/stock_location.ex
    alias Model.StockLocation, as: StockLocationModel

    # apps/snitch_core/lib/core/data/model/stock/stock_location.ex
    alias Snitch.Data.Schema.StockLocation, as: StockLocationSchema
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thechangelog/changelog.com&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; This is the CMS behind &lt;a href=&quot;https://changelog.com/&quot;&gt;changelog.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The business logic is under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/changelog&lt;/code&gt;. This directory seems to contain various modules as well as directories containing grouped functionality. All of the Ecto logic looks to be under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schema&lt;/code&gt; directory which contains some base schema modules as well as directories containing grouped schema functionality.&lt;/p&gt;

&lt;p&gt;Schemas have the typical Ecto schema logic but also sometimes many helpers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admins&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_email&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_by_website&lt;/code&gt; which are scoping/querying as well as defining changeset functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth_changeset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin_insert_changeset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin_update_changeset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_changeset&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;The schemas use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Changelog.Schema&lt;/code&gt; module which, in addition to adding many helper functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any?&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;by_position&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newest_first&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newest_last&lt;/code&gt;, etc…, does this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    use Ecto.Schema
    use Arc.Ecto.Schema

    import Ecto
    import Ecto.Changeset
    import Ecto.Query, only: [from: 1, from: 2]
    import EctoEnum, only: [defenum: 2]

    alias Changelog.{Hashid, Repo}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hexpm&quot;&gt;Hexpm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hexpm/hexpm&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; API server and website for Hex &lt;a href=&quot;https://hex.pm/&quot;&gt;https://hex.pm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/hexpm&lt;/code&gt; directory contains some modules with basic logic, but the schemas and contexts exist inside of grouping folders. For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/hexpm/accounts&lt;/code&gt; folder has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; schema and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt; context as well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization&lt;/code&gt; schema and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organizations&lt;/code&gt; context. The singular modules (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization&lt;/code&gt;) have the typical Ecto schema logic.&lt;/p&gt;

&lt;p&gt;The two types of module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Schema&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Context&lt;/code&gt; modules:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # lib/hexpm/schema.ex
    import Ecto
    import Ecto.Changeset
    import Ecto.Query, only: [from: 1, from: 2]
    import Hexpm.Changeset
    alias Ecto.Multi

    use Hexpm.Shared

    # lib/hexpm/context.ex
    import Ecto
    import Ecto.Changeset
    import Ecto.Query, only: [from: 1, from: 2]

    import Hexpm.Accounts.AuditLog,
      only: [audit: 3, audit: 4, audit_many: 4, audit_with_user: 4]

    alias Ecto.Multi
    alias Hexpm.Repo

    use Hexpm.Shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might have noticed that both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Shared&lt;/code&gt; module. This just does a lot of aliases which means that modules like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts.AuditLog&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Repository.Download&lt;/code&gt; become just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuditLog&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;While that pattern seems common, it’s not always the case. There is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auth&lt;/code&gt; module which is just a plain module as well as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserHandles&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Email&lt;/code&gt; schema modules without corresponding context modules. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts.Email&lt;/code&gt; actually seems to be used in the emails folder in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Emails&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Emails.Bamboo&lt;/code&gt;, which seems to be a case of one context reaching into another.&lt;/p&gt;

&lt;h2 id=&quot;elixirstatus-web&quot;&gt;elixirstatus-web&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rrrene/elixirstatus-web&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; Community site for Elixir project/blog post/version updates&lt;/p&gt;

&lt;p&gt;At the root of this project, there are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web&lt;/code&gt; directories. The schemas are located under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web/models&lt;/code&gt;. This appears to be a pretty old app (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE&lt;/code&gt; file is five years old), which is probably why it’s not using the recent pattern of putting business logic outside of the “web” part of the app.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt; directory contains four schemas (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impression&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Posting&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShortLink&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;) which all define typical Ecto schema logic. These all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use ElixirStatus.Web, :model&lt;/code&gt; which does:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    use Ecto.Schema
    import Ecto
    import Ecto.Changeset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another module under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web/models&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Avatar&lt;/code&gt; which doesn’t seem to be a schema but rather a grouping of helper functions.&lt;/p&gt;

&lt;p&gt;As an example of an context-like module, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impressionist&lt;/code&gt; module (stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/elixir_status/impressionist.ex&lt;/code&gt;) defines various querying methods for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impression&lt;/code&gt; schema along with some other helpers.&lt;/p&gt;

&lt;h2 id=&quot;my-thoughts&quot;&gt;My thoughts:&lt;/h2&gt;

&lt;p&gt;I already like Phoenix conventions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separating business logic from the web application logic&lt;/li&gt;
  &lt;li&gt;Separating business logic into contexts with well-established APIs&lt;/li&gt;
  &lt;li&gt;Ecto schema modules which are focused on mapping and validation of the data source
Things I like about these projects:&lt;/li&gt;
  &lt;li&gt;It’s very nice to have modules headed with something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use MyApp.Schema&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use MyApp.Context&lt;/code&gt; as the Hexpm project does. Even if the used module doesn’t do much, it provides an at-a-glance label when browsing files.&lt;/li&gt;
  &lt;li&gt;I like that Hexpm has established a bit of a convention around schemas (singular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;) vs contexts (plural &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;I like how the Avia project separates “domain”, “model”, and “schema”. In particular as a fan of &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt; using the word “domain” is nice and I think it’s used in the same way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things I don’t like from these projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aliasing the right-most module in a path (as the Avia project does) drops it’s context. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts.AuditLog&lt;/code&gt; is aliased as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuditLog&lt;/code&gt;, that might not be so bad because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuditLog&lt;/code&gt; is potentially a unique concept. But aliasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Repository.Download&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt; could confuse. If you alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Repository&lt;/code&gt; you can refer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accounts.AuditLog&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository.Download&lt;/code&gt; which I find clearer.&lt;/li&gt;
  &lt;li&gt;In the Avia project sometimes there are aliases like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.StockLocation&lt;/code&gt; aliased as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StockLocationModel&lt;/code&gt;. I would find it simpler to just refer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.StockLocation&lt;/code&gt; which is one character longer but makes the source clearer.&lt;/li&gt;
  &lt;li&gt;In hexpm the schema vs context convention doesn’t help when browsing a directory to distinguish schemas from plain module files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a long-time Rails developer, one thing that makes Rails nice is being able to go between apps easily because there is always a place for everything. But as an app grows large, grouping files by type means that directories like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controllers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt; get very full. The Phoenix project, I think trying to learn from Rails, encourages using contexts with well-defined APIs. Since each context often needs to solve different problems (such as wrapping a database, creating an API client, or just doing calculations), these can be structured however you like. But when it makes sense I think that we could create directories according to conventions to organize our code. For a long time, many projects have established loose conventions with directories like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;. In the web part of a Phoenix application, we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controller&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;We could do the same in the very common case where our contexts contain Ecto database logic. We are given the “schema” idea from Ecto itself as a way to separate transformation and validation logic. This helps us trim the fat from our “fat model” problem. But we’re left to put other query logic either into our schema or to have it mixed it with all of our context’s business logic.&lt;/p&gt;

&lt;p&gt;So after my investigation, the way that I plan to move forward:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # The context&apos;s public API, headed with `use MyApp.Context`
    my_app/&amp;lt;context&amp;gt;.ex

    # Headed with `use MyApp.Schema`
    my_app/&amp;lt;context&amp;gt;/schema/user.ex

    # Headed with `use MyApp.Query`
    my_app/&amp;lt;context&amp;gt;/query/user.ex

    # For non-DB business logic
    my_app/&amp;lt;context&amp;gt;/&amp;lt;some_module&amp;gt;.ex
    my_app/&amp;lt;context&amp;gt;/&amp;lt;some_module&amp;gt;/&amp;lt;sub_module&amp;gt;.ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These things might certainly change, but having looked through some other codebases and reflecting on what I like and don’t like, I think that this will be a good start.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><category term="phoenix" /><category term="ecto" /><summary type="html">I’ve mix phx.new ed many applications and when doing so I often start with wondering how to organize my code. I love how Phoenix pushes you to think about the different domains in your app via generators while at the same time I have the freedom to organize modules on my own. Ecto schemas make for a nice abstraction, but where should I put code related just to that table? It could be in the context, but I don’t want the context to become a “grab bag” of unorganized function calls.</summary></entry><entry><title type="html">Expecting the Unexpected in Elixir</title><link href="http://www.brian-underwood.codes//elixir/2020/01/31/expecting-the-unexpected-in-elixir" rel="alternate" type="text/html" title="Expecting the Unexpected in Elixir" /><published>2020-01-31T00:00:00+01:00</published><updated>2020-01-31T00:00:00+01:00</updated><id>http://www.brian-underwood.codes//elixir/2020/01/31/expecting-the-unexpected-in-elixir</id><content type="html" xml:base="http://www.brian-underwood.codes//elixir/2020/01/31/expecting-the-unexpected-in-elixir">&lt;p&gt;&lt;img style=&quot;width: 800px; margin: 0 auto;&quot; src=&quot;/assets/expecting_the_unexpected/rocket.jpg&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;em&gt;Apollo 11&apos;s Saturn V rocket on the launchpad at the Kennedy Space Center. 1 July 1969. Photo: &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Apollo_11_Saturn_V_on_the_pad_at_the_Kennedy_Space_Center.jpg&quot;&gt;NASA&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can a 50 year old cryptic error message teach us about the software we write today?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-posted from &lt;a href=&quot;https://medium.com/fishbrain/expecting-the-unexpected-in-elixir-a24deb06b5a6&quot;&gt;Medium&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On July 24, 1969 Neil Armstrong and Buzz Aldrin were attempting to land on the moon for the first time in human history. As you might expect it was a tense situation. Of course it was just then that they got what every computer user hates to get… a cryptic error code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Neil Armstrong: PROGRAM ALARM.
Mission Control: It’s looking good to us. Over.
Neil Armstrong: It’s a 1202.
Buzz Aldrin: 1202.

(14 seconds later…)

Neil Armstrong: Give us a reading on the 1202 PROGRAM ALARM.
Mission Control: Roger. We got — We’re GO on that alarm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.hq.nasa.gov/alsj/a11/a11transcript_tec.html&quot;&gt;Apollo 11 — Technical Air-To-Ground Voice Transcription&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unhelpfully, the error (along with a related 1201 error) continued to pop up in the minutes before landing as Armstrong focused on piloting. As they finally touched down the error was forgotten and they prepared to take their giant leap for mankind. But what was the mysterious error?&lt;/p&gt;

&lt;h2 id=&quot;expecting-the-unexpected&quot;&gt;Expecting the Unexpected&lt;/h2&gt;

&lt;p&gt;Some months back I wanted to give a brief presentation at our local Stockholm Elixir meetup group. As Scenic (a application user interface library) had been recently released it was a perfect opportunity to learn something new while hanging out with other Alchemists. When thinking of what to do with Scenic, I decided that I wanted to integrate with one of my favorite games: Kerbal Space Program. After all, why have only one challenge when you can have two instead?&lt;/p&gt;

&lt;p&gt;Kerbal Space Program is a game that gives you a small space center and the opportunity to try rocket science for yourself (be ready for lots of explosions). From the community of its fans we also get the kRPC plugin which allows other programs to interface with the game’s internal APIs using Protocol Buffers. This was just what I needed to implement a Kerbal Space Program dashboard demo.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 800px; margin: 0 auto;&quot; src=&quot;/assets/expecting_the_unexpected/dashboard.png&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;em&gt;The Demo Dashboard Interface&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;As part of the Apollo program, the MIT Instrumentation Laboratory was tasked with designing the Apollo Guidance Computer. For that the team exhaustively tested the computer and the mission programs to make sure there would always be capacity. Fortunately the computer was also designed so that if it did exceed capacity it would restart and pick back up where it left off. The 1202 / 1201 errors were indications of this happening.&lt;/p&gt;

&lt;p&gt;While you may never build something as important as the Apollo Guidance Computer, users of your software would prefer that it Just Worked. Fortunately with Elixir we are given the tools which allow us to give our users just as seamless of an experience.&lt;/p&gt;

&lt;p&gt;In creating my demo I realized that Scenic and Kerbal Space Program would make a great demonstration on how to design for failure in (mock) life-critical situations. Since Scenic uses supervisors for its components it’s designed to fail and recover seamlessly. Perfect to visually demonstrate designing for failure.&lt;/p&gt;

&lt;h2 id=&quot;integrating-with-scenic-and-krpc&quot;&gt;Integrating with Scenic and kRPC&lt;/h2&gt;

&lt;p&gt;When I researched Elixir solutions to work with kRPC I found the &lt;a href=&quot;https://github.com/FiniteMonkeys/jooce&quot;&gt;jooce&lt;/a&gt; project. This project had some good example code which I looked through, though when I tried running the code it didn’t work. After quite a lot of struggling I found that it seemed to have been designed for an older version of the kRPC plugin. Because of this I ended up building my own (very simple) interface using &lt;a href=&quot;https://github.com/bitwalker/exprotobuf&quot;&gt;exprotobuf&lt;/a&gt;. This worked, more or less, though I needed to use a specific branch of the Erlang gpb (Google Protobuf) library from CraigCottingham’s fork which fixed a bug I was experiencing.&lt;/p&gt;

&lt;p&gt;All of this worked fine and you can see the code &lt;a href=&quot;https://gitlab.com/cheerfulstoic/ksp_scenic_dashboard/blob/master/lib/krpc.ex&quot;&gt;here&lt;/a&gt;, but more recently I found the &lt;a href=&quot;https://github.com/wisq/space_ex&quot;&gt;space_ex&lt;/a&gt; Elixir library. This probably would have been an ideal solution if I had found it when I was putting together my demo project.&lt;/p&gt;

&lt;p&gt;Once I was able to integrate kRPC, I needed to be able to display the dashboard. In Scenic you create a hierarchy of components representing more and more focused parts of your UI. The components are Elixir processes and can receive messages which may change the state of the components and cause the display to be refreshed. I was able to use the &lt;a href=&quot;https://github.com/boydm/scenic_sensor&quot;&gt;scenic_sensor&lt;/a&gt; library to create another supervised hierarchy of to hold my “sensors”. These sensors would simply send themselves messages to loop every 200 milliseconds at which point they could query the game and then send the latest readings to the Scenic components. The supervision tree looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 800px; margin: 0 auto;&quot; src=&quot;/assets/expecting_the_unexpected/supervision_tree.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I was first testing this out, my components would flash back and forth. After debugging for a while it I found that while each component would set its own value just fine, the Scenic graph that was being used was always the initial one. Therefore each change reflected only the most recent sensor. Fortunately the fix in my project was easy and a simple PR to the &lt;a href=&quot;https://github.com/boydm/scenic_new&quot;&gt;scenic_new&lt;/a&gt; project would help prevent others from running into it.&lt;/p&gt;

&lt;p&gt;With the UI updating smoothly, I wanted to be able to simulate failure in the system. I decide to start with each component having a 1% chance of failing on every sensor check. With a check every 200 milliseconds and two sensors refreshing, that means that there should be a failure approximately every 10 seconds! That worked well, though when I would try to scale it up I would get a mess of Elixir backtraces that I had a hard time figuring out. After more struggling I realized that I was hitting the retry limits of the supervisors and they were simply giving up. After a simple update of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_restarts&lt;/code&gt;, I could monitor my sensors without even noticing flickering as things constantly crashed. I was even able to demo it at the meetup!&lt;/p&gt;

&lt;h2 id=&quot;bonus-notes&quot;&gt;Bonus Notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I found this &lt;a href=&quot;https://www.youtube.com/watch?v=Qj2IETkScWA&quot;&gt;video&lt;/a&gt; of somebody simulating the Apollo Guidance Computer to use in my presentation. In includes audio from the astronauts asking about the 1202 alarm&lt;/li&gt;
  &lt;li&gt;For those interested in more information, Vintage Space has a good &lt;a href=&quot;https://www.youtube.com/watch?v=kGD0zEbiDPQ&quot;&gt;video&lt;/a&gt; and &lt;a href=&quot;https://www.discovermagazine.com/the-sciences/apollo-11s-1202-alarm-explained#.W__d35NKh24&quot;&gt;writeup&lt;/a&gt; about the 1201 / 1202 alarms.&lt;/li&gt;
  &lt;li&gt;Aviation Week had an &lt;a href=&quot;https://web.archive.org/web/20180505110204/http://aviationweek.com/blog/dragons-radiation-tolerant-design&quot;&gt;interview&lt;/a&gt; (Wayback Machine link) with John Muratore at SpaceX discussing how they make radiation-tolerant hardware (which double checks it’s work and restarts as needed)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><category term="ksp" /><summary type="html"></summary></entry><entry><title type="html">Analyzing Ruby Code with Neo4j</title><link href="http://www.brian-underwood.codes//ruby/rails/neo4j/2016/01/11/analyzing_ruby_code_with_Neo4j" rel="alternate" type="text/html" title="Analyzing Ruby Code with Neo4j" /><published>2016-01-11T18:09:00+01:00</published><updated>2016-01-11T18:09:00+01:00</updated><id>http://www.brian-underwood.codes//ruby/rails/neo4j/2016/01/11/analyzing_ruby_code_with_Neo4j</id><content type="html" xml:base="http://www.brian-underwood.codes//ruby/rails/neo4j/2016/01/11/analyzing_ruby_code_with_Neo4j">&lt;style&gt;
table {
  border-collapse: collapse;
}
table, th, td {
  border: 1px solid #CCC;
  padding: 0.3em;
}

&lt;/style&gt;

&lt;p&gt;For a long time I’ve been wanting to use Neo4j as a tool to analyze Ruby code.  Using Ruby for almost a decade, I have a lot of experience with effectively finding my way around Ruby code.  Still Ruby programs can by very dynamic and thus tools are always welcome.  As I’ve begun to use Neo4j I’ve been inspired by code analysis tools such as &lt;a href=&quot;http://mlsec.org/joern/&quot;&gt;joern&lt;/a&gt; and &lt;a href=&quot;http://jqassistant.org/&quot;&gt;jQAssistant&lt;/a&gt; as well as Aaron Patterson’s &lt;a href=&quot;http://tenderlove.github.io/heap-analyzer/&quot;&gt;heap-analyzer&lt;/a&gt;.  In that spirit I’d like to announce a new project called &lt;a href=&quot;https://github.com/neo4jrb/neolytics&quot;&gt;Neolytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neolytics is a Ruby gem which records the execution of a block of Ruby code in a Neo4j database.  There are three major things which it records:&lt;/p&gt;

&lt;h3 id=&quot;each-step-of-the-execution&quot;&gt;Each step of the execution&lt;/h3&gt;

&lt;p&gt;This is thanks to Ruby’s excellent &lt;a href=&quot;http://ruby-doc.org/core-2.0.0/TracePoint.html&quot;&gt;TracePoint&lt;/a&gt; class.  TracePoint gives a hook into each execution step of Ruby code so that we can record line executions, method calls/returns, and raising of executions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/trace_point_flow.png&quot; alt=&quot;TracePoint flow model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;objects-which-are-found-along-the-way&quot;&gt;Objects which are found along the way&lt;/h3&gt;

&lt;p&gt;For each trace point Neolytics finds:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the object which is the context of the TracePoint&lt;/li&gt;
  &lt;li&gt;objects which are passed as arguments (if a call)&lt;/li&gt;
  &lt;li&gt;objects which are returned (if a return)&lt;/li&gt;
  &lt;li&gt;objects which are referenced via variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each object the class and module ancestry information is also recursively imported.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/trace_point_objects.png&quot; alt=&quot;TracePoint objects&quot; style=&quot;width: 49%; float: left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/object_relationships.png&quot; alt=&quot;Object space model&quot; style=&quot;width: 49%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-syntax-trees-of-all-ruby-code-files-involved-in-the-execution&quot;&gt;Abstract syntax trees of all Ruby code files involved in the execution&lt;/h3&gt;

&lt;p&gt;With thanks to the &lt;a href=&quot;https://github.com/whitequark/parser&quot;&gt;parser&lt;/a&gt; gem!  Additionally method definitions in the AST are linked to their corresponding TracePoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/ast.png&quot; alt=&quot;Abstract Syntax Tree model&quot; style=&quot;width: 49%&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/trace_point_ast_nodes.png&quot; alt=&quot;TracePoint AST Link&quot; style=&quot;width: 49%; vertical-align: top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To record the data, I used my &lt;a href=&quot;https://github.com/neo4jrb/neo4apis&quot;&gt;neo4apis&lt;/a&gt; gem to send data to Neo4j efficiently without a lot of round trips to the database.&lt;/p&gt;

&lt;p&gt;Lastly, I’ve built a &lt;a href=&quot;https://github.com/neo4j-examples/ruby_code_analytics&quot;&gt;ruby_code_analytics&lt;/a&gt; Rails application to give a UI to examine the results of the dump.  You can see an example running &lt;a href=&quot;https://ruby-neo4j-code-analysis.herokuapp.com&quot;&gt;on Heroku&lt;/a&gt; which is a record of the following simple Ruby code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;

neo4j_session = Neo4j::Session.open(:server_db, neo4j_url)
Neolytics.record_execution(neo4j_session) do
  doc = Nokogiri::HTML(open(&apos;https://www.google.com&apos;).read)
  doc.xpath(&apos;//form/input&apos;).map(&amp;amp;:name)
end

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;querying-the-data&quot;&gt;Querying the data&lt;/h2&gt;

&lt;p&gt;Let’s look at some examples of things that you can do with the data from neolytics!&lt;/p&gt;

&lt;h3 id=&quot;examining-the-execution&quot;&gt;Examining the execution&lt;/h3&gt;

&lt;p&gt;Let’s say that we want to know what goes on during the execution of a method.  With the following query we grab the first TracePoint which was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; event and find the entire series of TracePoints until the method is returned from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (call_tp:TracePoint {event: &apos;call&apos;})
WITH call_tp LIMIT 1
MATCH path=shortestPath((call_tp)-[:NEXT*]-&amp;gt;(return_tp:TracePoint {event: &apos;return&apos;}))
RETURN path

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visually we can see the query like this:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;a href=&quot;/assets/neolytics/method_call_chain.png&quot;&gt;&lt;img src=&quot;/assets/neolytics/method_call_chain.png&quot; style=&quot;width: 800px&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;In this case the method is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#plural&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_support&lt;/code&gt; gem which lets you pluralize strings.  You can compare the graph database model with the actual source code &lt;a href=&quot;https://github.com/rails/rails/blob/v4.2.5/activesupport/lib/active_support/inflector/inflections.rb#L105&quot;&gt;here on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, each node is displaying a TracePoint event (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;line&lt;/code&gt;, etc…), the class and method in question, and the line number.  Starting from the node on the left you can follow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NEXT&lt;/code&gt; relationships to see each point in the execution.  Note that every node has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HAS_PARENT&lt;/code&gt; relationship back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; TracePoint, so we can see that this method didn’t make any further method calls (at least no Ruby calls.  We see some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_call&lt;/code&gt; events which TracePoint doesn’t expose).  Lastly note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STARTED_AT&lt;/code&gt; relationship from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; event to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; event which is there as a convenience for any query that need to get both nodes at once (e.g. if you need to get both the arguments and the return value of a method).&lt;/p&gt;

&lt;p&gt;For more details you can see &lt;a href=&quot;https://github.com/neo4jrb/neolytics/blob/master/examples/output/plural_trace_points.csv&quot;&gt;this example tabular output&lt;/a&gt; of the tracepoints.&lt;/p&gt;

&lt;h3 id=&quot;running-code-metrics&quot;&gt;Running code metrics&lt;/h3&gt;

&lt;p&gt;Let’s run a query to evaluate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;cyclomatic complexity&lt;/a&gt; of our methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (def:ASTNode {type: &apos;def&apos;})
OPTIONAL MATCH (def)&amp;lt;-[:HAS_PARENT*]-(condition:ASTNode)
WHERE condition.type IN [&apos;begin&apos;, &apos;if&apos;, &apos;while&apos;, &apos;until&apos;, &apos;for&apos;, &apos;rescue&apos;, &apos;when&apos;, &apos;and&apos;, &apos;or&apos;]
RETURN def.name, def.file_path, def.first_line, count(condition)
ORDER BY count(condition) DESC
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a straightforward listing of methods, where to find them, and their complexity score, all ordered with the most complex methods at the top:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;method&lt;/th&gt;
      &lt;th&gt;Path and line&lt;/th&gt;
      &lt;th&gt;complexity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;initialize_pattern&lt;/td&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/uri/rfc2396_parser.rb:342&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;validate&lt;/td&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/rubygems/specification.rb:2453&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;perform_arguments&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sass-3.4.20/lib/sass/tree/visitors/perform.rb:14&lt;/td&gt;
      &lt;td&gt;57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_next_token&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/nokogiri-1.6.7/lib/nokogiri/css/tokenizer.rb:55&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parse&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/tzinfo-1.2.2/lib/tzinfo/zoneinfo_timezone_info.rb:95&lt;/td&gt;
      &lt;td&gt;55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pretty_print&lt;/td&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/pp.rb:421&lt;/td&gt;
      &lt;td&gt;53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;merge_final_ops&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sass-3.4.20/lib/sass/selector/sequence.rb:342&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;call&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sprockets-3.5.2/lib/sprockets/server.rb:22&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;convert_input&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/erubis-2.7.0/lib/erubis/converter.rb:127&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;visit_rule&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sass-3.4.20/lib/sass/tree/visitors/to_css.rb:280&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now let’s extend this complexity metric by using the TracePoint data to see how long each method actually took:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (tp:TracePoint)
WITH sum(tp.execution_time) AS total_execution_time

MATCH (node:ASTNode {type: &apos;def&apos;})
OPTIONAL MATCH (node)&amp;lt;-[:HAS_PARENT*]-(condition:ASTNode)
WHERE condition.type IN [&apos;begin&apos;, &apos;if&apos;, &apos;while&apos;, &apos;until&apos;, &apos;for&apos;, &apos;rescue&apos;, &apos;when&apos;, &apos;and&apos;, &apos;or&apos;]
WITH node, count(condition) AS complexity, total_execution_time

MATCH (node)&amp;lt;-[:HAS_AST_NODE]-(tp:TracePoint)&amp;lt;-[:STARTED_AT]-(return_tp:TracePoint)

WITH
  complexity,
  total_execution_time,
  tp.path + &apos;:&apos; + tp.lineno + &apos; (&apos; + return_tp.defined_class + &apos;#&apos; + return_tp.method_id + &apos;)&apos; AS method,
  count(tp) AS executions,
  sum(return_tp.execution_time) AS total_method_execution_time

RETURN
  method,
  complexity AS cc,
  executions AS execs,
  total_method_execution_time AS total_time,
  100.0 * (total_method_execution_time / total_execution_time) AS percentage_of_total_time,
  total_method_execution_time / executions AS avg_exec

ORDER BY total_method_execution_time DESC
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this we get a nice table of methods which take the most time, along with the cyclomatic complexity.  We can sort by either metric or create a combined metric of our own in order to determine which methods might be ripe for refactoring.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;method&lt;/th&gt;
      &lt;th&gt;cc&lt;/th&gt;
      &lt;th&gt;execs&lt;/th&gt;
      &lt;th&gt;total_time&lt;/th&gt;
      &lt;th&gt;% total time&lt;/th&gt;
      &lt;th&gt;avg_exec&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/set.rb:289 &lt;br /&gt;&lt;strong&gt;Set#add&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2343&lt;/td&gt;
      &lt;td&gt;11457&lt;/td&gt;
      &lt;td&gt;2.31&lt;/td&gt;
      &lt;td&gt;4.89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/activesupport-4.2.5/lib/active_support/inflector/methods.rb:91 &lt;br /&gt;&lt;strong&gt;ActiveSupport::Inflector#underscore&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;237&lt;/td&gt;
      &lt;td&gt;5057&lt;/td&gt;
      &lt;td&gt;1.02&lt;/td&gt;
      &lt;td&gt;21.34&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:27 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#match&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;810&lt;/td&gt;
      &lt;td&gt;4917&lt;/td&gt;
      &lt;td&gt;0.99&lt;/td&gt;
      &lt;td&gt;6.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:43 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#command_options&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;641&lt;/td&gt;
      &lt;td&gt;3790&lt;/td&gt;
      &lt;td&gt;0.76&lt;/td&gt;
      &lt;td&gt;5.91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:177 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#command_regex&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;510&lt;/td&gt;
      &lt;td&gt;3722&lt;/td&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;7.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:185 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#convert_to_regex&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1020&lt;/td&gt;
      &lt;td&gt;3537&lt;/td&gt;
      &lt;td&gt;0.71&lt;/td&gt;
      &lt;td&gt;3.47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/activesupport-4.2.5/lib/active_support/dependencies/autoload.rb:35 &lt;br /&gt;&lt;strong&gt;ActiveSupport::Autoload#autoload&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
      &lt;td&gt;3186&lt;/td&gt;
      &lt;td&gt;0.64&lt;/td&gt;
      &lt;td&gt;13.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sprockets-3.5.2/lib/sprockets/utils.rb:33 &lt;br /&gt;&lt;strong&gt;Sprockets::Utils#hash_reassoc1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;115&lt;/td&gt;
      &lt;td&gt;2366&lt;/td&gt;
      &lt;td&gt;0.48&lt;/td&gt;
      &lt;td&gt;20.57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/activesupport-4.2.5/lib/active_support/core_ext/module/delegation.rb:151 &lt;br /&gt;&lt;strong&gt;Module#delegate&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
      &lt;td&gt;1164&lt;/td&gt;
      &lt;td&gt;0.23&lt;/td&gt;
      &lt;td&gt;27.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:37 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#description&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;152&lt;/td&gt;
      &lt;td&gt;1158&lt;/td&gt;
      &lt;td&gt;0.23&lt;/td&gt;
      &lt;td&gt;7.62&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;more-options&quot;&gt;More options&lt;/h2&gt;

&lt;p&gt;There are many ways to use this data model to debug and otherwise analyze our code.  I’ve provided some more sample queries in &lt;a href=&quot;https://github.com/neo4jrb/neolytics&quot;&gt;the README&lt;/a&gt; for the neolytics gem.  I’ve also started &lt;a href=&quot;https://github.com/neo4j-examples/ruby_code_analytics/labels/idea%20for%20query&quot;&gt;a list of ideas&lt;/a&gt; for new queries which could be made.  These could be used directly or perhaps built into a reporting feature of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby_code_analytics&lt;/code&gt; Rails application.  I’m excited to see where things could go!&lt;/p&gt;

&lt;p&gt;Analysis app running on Heroku: &lt;a href=&quot;https://ruby-neo4j-code-analysis.herokuapp.com&quot;&gt;https://ruby-neo4j-code-analysis.herokuapp.com&lt;/a&gt;&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="ruby" /><category term="rails" /><category term="neo4j" /><category term="neo4j" /><category term="tools" /><category term="neo4j.rb" /><summary type="html"></summary></entry><entry><title type="html">GraphStarter: Getting a Neo4j Rails app up and running quickly</title><link href="http://www.brian-underwood.codes//2015/10/27/graph_starter" rel="alternate" type="text/html" title="GraphStarter: Getting a Neo4j Rails app up and running quickly" /><published>2015-10-27T10:55:00+01:00</published><updated>2015-10-27T10:55:00+01:00</updated><id>http://www.brian-underwood.codes//2015/10/27/graph_starter</id><content type="html" xml:base="http://www.brian-underwood.codes//2015/10/27/graph_starter">&lt;p&gt;For a while now I’ve been building various &lt;a href=&quot;http://neo4jrb.io/&quot;&gt;Neo4j.rb&lt;/a&gt; educational resources using the example of an &lt;a href=&quot;http://github.com/neo4j-examples/asset_portal&quot;&gt;asset portal&lt;/a&gt;.  There has been:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a screencast series (the &lt;a href=&quot;http://neo4j.com/blog/create-a-ruby-on-rails-app-with-neo4j-screencast-series/&quot;&gt;first half&lt;/a&gt; and the &lt;a href=&quot;http://neo4j.com/blog/advanced-ruby-on-rails-with-neo4j/&quot;&gt;second half&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;a &lt;a href=&quot;http://www.sitepoint.com/why-you-should-use-neo4j-in-your-next-ruby-app/&quot;&gt;SitePoint article&lt;/a&gt; on building recommendations and access control&lt;/li&gt;
  &lt;li&gt;a &lt;a href=&quot;https://www.youtube.com/watch?v=dlRL-3XZvHs&quot;&gt;webinar&lt;/a&gt; on advanced access control&lt;/li&gt;
  &lt;li&gt;a &lt;a href=&quot;http://neo4j.com/developer/ruby-course/&quot;&gt;introduction course&lt;/a&gt; for Neo4j using Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As part of this process I’ve wanted to use what I’ve been building and allow anybody to easily create a UI for their own assets in Rails.  I’m pleased to say that I’ve got a good start with the &lt;a href=&quot;https://github.com/neo4j-examples/graph_starter&quot;&gt;graph_starter&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; gem is a Rails engine, which means that it can be placed within a Rails application.  The goal is to be able to quickly set up a basic UI for your entities, but to also be able to override it when you want to provide custom logic.&lt;/p&gt;

&lt;p&gt;Setting up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; application is as simple as the following steps:&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; is easy!&lt;/p&gt;

&lt;p&gt;First create a Rails application if you don’t already have one:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new application_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; gem (it will include the Neo4j.rb gems for you):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Gemfile

gem &apos;graph_starter&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mount the engine:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# config/routes.rb

mount GraphStarter::Engine =&amp;gt; &apos;/&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create some asset models:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# app/models/product.rb

class Product &amp;lt; GraphStarter::Asset
  # `title` property is added automatically

  property :name
  property :description
  property :price, type: Integer

  has_images

  has_one :in, :vendor, type: :SELLS_PRODUCT
end

# app/models/vendor.rb

class Vendor &amp;lt; GraphStarter::Asset
  property :brand_name
  property :code

  name_property :brand_name

  has_many :out, :products, origin: :vendor
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These models are simply Neo4j.rb &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveNode&lt;/code&gt; models so you can refer to the &lt;a href=&quot;http://neo4jrb.readthedocs.org/&quot;&gt;Neo4j.rb documentation&lt;/a&gt; to define them.  They do have some special methods, however, which let you control how GraphStarter works.  In the above &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; model, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_images&lt;/code&gt; has been called to indicate that products have images which defines a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; model along with the neccessary association.  See the &lt;a href=&quot;https://github.com/neo4j-examples/graph_starter#models&quot;&gt;graph_starter README&lt;/a&gt; for documentation on how to configure aspects of your models.&lt;/p&gt;

&lt;p&gt;Once that framework is in place you can define a way to import data, if desired.  For this I would suggest making a rake task:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# lib/tasks/store.rake

namespace :store do
  task :import do
    CSV.open(File.read(&apos;vendors.csv&apos;)).each do |row|
      Vendor.create(name: row[&apos;brand_name&apos;],
                    code: row[&apos;code&apos;])
    end

    CSV.open(File.read(&apos;products.csv&apos;)).each do |row|
      product = Product.create(name: row[&apos;name&apos;],
                               description: row[&apos;description&apos;],
                               price: row[&apos;price&apos;].to_i)

      product.vendor = Vendor.find_by(code: row[&apos;vendor_code&apos;])
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s all!&lt;/p&gt;

&lt;p&gt;When everything is in place you can simply start up your Rails server (by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails server&lt;/code&gt;) and you get a UI which looks like this example site I made using data from the &lt;a href=&quot;http://www.nhm.ac.uk/&quot;&gt;Natural History Museum&lt;/a&gt; in London:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%; display: block; margin: 0 auto&quot; src=&quot;/assets/graph_starter/assets_index.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%; display: block; margin: 0 auto&quot; src=&quot;/assets/graph_starter/assets_show.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;http://nhm-portal.herokuapp.com/&quot;&gt;browse the app&lt;/a&gt; on Heroku and &lt;a href=&quot;https://github.com/neo4j-examples/nhm_asset_portal&quot;&gt;checkout the repository&lt;/a&gt; on Github&lt;/p&gt;

&lt;p&gt;I’ll be working on a new project to create a &lt;a href=&quot;http://graphgist.neo4j.com/&quot;&gt;GraphGist portal&lt;/a&gt; based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; gem so I plan to continue improving it!&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="neo4j.rb" /><category term="ruby gem" /><summary type="html">For a while now I’ve been building various Neo4j.rb educational resources using the example of an asset portal. There has been:</summary></entry><entry><title type="html">Using Graph Structure Record Linkage on Irish Census Data with Neo4j</title><link href="http://www.brian-underwood.codes//2015/08/20/using_graph_structure_record_linkage_on_irish_census_data_with_neo4j" rel="alternate" type="text/html" title="Using Graph Structure Record Linkage on Irish Census Data with Neo4j" /><published>2015-08-20T09:55:00+02:00</published><updated>2015-08-20T09:55:00+02:00</updated><id>http://www.brian-underwood.codes//2015/08/20/using_graph_structure_record_linkage_on_irish_census_data_with_neo4j</id><content type="html" xml:base="http://www.brian-underwood.codes//2015/08/20/using_graph_structure_record_linkage_on_irish_census_data_with_neo4j">&lt;p&gt;For just over a year I’ve been obsessed on-and-off with a project ever since I stayed in the town of Skibbereen, Ireland.  Taking data from the &lt;a href=&quot;http://www.census.nationalarchives.ie/&quot;&gt;1901 and 1911 Irish censuses&lt;/a&gt; I hoped I would be able to find a way to reliably link resident records from the two together to identify the same residents.  Since then I’ve learned a bit about &lt;a href=&quot;/tag/master-data-management&quot;&gt;master data management and record linkage&lt;/a&gt; and so I thought I would give it another stab.  Here I’d like to talk about how I’ve been matching records based on the local data space around objects to improve my record linkage scoring.&lt;/p&gt;

&lt;p&gt;The data model of the imported data is very linear:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%; display: block; margin: 0 auto&quot; src=&quot;/assets/neo4j-mdm/irish_census_wrah.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post, however, I’m going to be focusing on Houses and Residents and creating relationships between them based on their properties.&lt;/p&gt;

&lt;h2 id=&quot;relations-to-the-head&quot;&gt;Relations to the Head&lt;/h2&gt;

&lt;p&gt;To view an example of what a census record from 1911 Ireland looks like you can have a look at the McCarthys of &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1901/Cork/Cloghdowell/Barnagowlane/1154382/&quot;&gt;1901&lt;/a&gt; and &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1911/Cork/Cloghdonnell/Barnagowlane/440559/&quot;&gt;1911&lt;/a&gt;.  Charles is the head of the family with his wife Hannah, mother Ellen, children (two in 1901 and seven in 1911), and a servant (Timothy Walsh in 1901 and William Regan in 1911).&lt;/p&gt;

&lt;style&gt;
table {
  border-collapse: collapse;
  margin: 0 auto !important;
}
table, th, td {
  border: 1px solid #CCC;
  padding: 0.3em;
}
&lt;/style&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td style=&quot;font-weight: 0.8em; font-weight: bold; text-align: center&quot;&gt;
      &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1901/Cork/Cloghdowell/Barnagowlane/1154382/&quot;&gt;
        &lt;img style=&quot;width: 350px; display: block; margin: 0 auto&quot; src=&quot;/assets/neo4j-mdm/mccarthy_census_1901.png&quot; /&gt;
        The McCarthy family of Barnagowlane, Cloghdowell, Cork, 1901
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td style=&quot;font-weight: 0.8em; font-weight: bold; text-align: center&quot;&gt;
      &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1911/Cork/Cloghdonnell/Barnagowlane/440559/&quot;&gt;
        &lt;img style=&quot;width: 350px; display: block; margin: 0 auto&quot; src=&quot;/assets/neo4j-mdm/mccarthy_census_1911.png&quot; /&gt;
        The McCarthy family of Barnagowlane, Cloghdonnell, Cork, 1911
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Surname&lt;/th&gt;
      &lt;th&gt;Forename&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Relation to Head&lt;/th&gt;
      &lt;th&gt;Religion&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Surname&lt;/th&gt;
      &lt;th&gt;Forename&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Relation to Head&lt;/th&gt;
      &lt;th&gt;Religion&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Charles&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Head of Family&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Charles&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Head of Family&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Hannah&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Wife&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Hannah&lt;/td&gt;
      &lt;td&gt;35&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Wife&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;William&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;William&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Bridget&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Bridget&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Ellen&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Kate&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Florence&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Charles Peter&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Annie&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Ellen&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Mother&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;? Ellen&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Mother&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Walsh&lt;/td&gt;
      &lt;td&gt;Timothy&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Servant&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Regan&lt;/td&gt;
      &lt;td&gt;William&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Servant&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The McCarthys are an almost exact match between two census records between 1901 and 1911.  The names, ages, occupations, and relationships all match perfectly.  Unfortunately the story for other records is not so simple.  Many times houses, which to the human eye seem to be the same house, can have wildly varying details.  For example Hannah might go be listed as Hana or Anne in a different census.  Likewise ages vary a lot more than you might think.  In examining the records I regularly found ages varying by a year or two and have even found a few houses with ages off by as much as 10-15 years.&lt;/p&gt;

&lt;p&gt;In both censuses there is a field for residents to fill out called “Relation to Head”.  This gives us information about how each resident is related to the head of the house.  In the case of the McCarthys, Charles is listed as “Head of Fa&lt;D-i&gt;mily&quot; in both years.  The rest of the family has a nice representation of things that we often see in the data: &quot;Wife&quot;, &quot;Son&quot;, &quot;Daughter&quot;, and &quot;Servant&quot;.&lt;/D-i&gt;&lt;/p&gt;

&lt;p&gt;We might be tempted to say “This person was the head in 1901, so they must be the same person who was the head in 1911”.  Often, however, the head of the family can die or retire leaving the roll of head of the family to their wife or child.  Can the “Relation to Head” values still be useful to us to match any given resident from 1901 to another resident in 1911?&lt;/p&gt;

&lt;p&gt;First let’s cover the general the process of record linkage I have been using.  To find a match for a resident I start by using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch&lt;/code&gt; server (which contains a duplicate of my Neo4j census data) to quickly find a list of other residents with a match on very rough criteria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the resident in the other census?&lt;/li&gt;
  &lt;li&gt;Does the sex match (or it it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;)?&lt;/li&gt;
  &lt;li&gt;Is the resident’s age within 15 years of what it would be expected to be in the other census?&lt;/li&gt;
  &lt;li&gt;Does the name match roughly (within an edit distance of 4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This comes back with anywhere from zero to hundreds of results.  I call these “similarity candidates” and for each I create a relationship between the original record and the candidate.&lt;/p&gt;

&lt;p&gt;With this list I can compare the attributes of the two records (using the &lt;a href=&quot;https://rubygems.org/gems/record_linkage&quot;&gt;record_linkage&lt;/a&gt; gem I created) to see how closely they match.  The closer their name, sex, age, etc.. matches, the higher score they get.  Ideally the real match should have the highest score, but that isn’t always true and can take &lt;a href=&quot;http://127.0.0.1:4000/2015/05/14/master_data_management_scoring_examples/&quot;&gt;some tuning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to this simple comparison of attributes, I have now added a process to take advantage of the similarity candidate relationships to compare family relationships.  Let’s start with this example of a sub-graph pattern:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 850px; margin: 0.6em;&quot; src=&quot;/assets/neo4j-mdm/mccarthy_charles_comparison.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The relationship &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHILD_OF&lt;/code&gt; is created whenever there is a “Son” or “Daughter” in the “Realation to Head” field.  Likewise we can create other gender-neutral relationships like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARRIED_TO&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIBLING_OF&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIECE_NEPHEW_OF&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;In this case the resident in question is the 1901 record for William.  When we are evaluating the 1911 record of William as a potential match we can explore other residents in the same house as evidence of similarity.  The diagram above shows that both records have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHILD_OF&lt;/code&gt; relationship to the two “Charles” records which furthermore are linked via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationship.  Because of this we can say that there is a greater chance that the two “William” records represent the same person.&lt;/p&gt;

&lt;p&gt;This only gives us the ability to find these relationships between the head of the family and other residents.  What about generically matching based on the relationship of any two residents of a house?  Let’s say that Charles died sometime between 1901 and 1911.  If his wife Hannah takes over as the head of the family we would have a sub-graph which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 850px; margin: 0.6em;&quot; src=&quot;/assets/neo4j-mdm/mccarthy_hannah_comparison.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could say that when we have the paths &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&amp;lt;-MARIED_TO-&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&lt;/code&gt; on either side that we can build our case for a match a bit more.  This kind of matching can be used on all of the other residents of the house with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationships.  For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&amp;lt;-CHILD_OF-&lt;/code&gt; could be matched to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&amp;lt;-CHILD_OF-&lt;/code&gt; even in this case where the wife becomes the head of the house.  Or if a child becomes the head then it could be compared to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-SIBLING_OF-&lt;/code&gt; relationship.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;So how do we actually do this?  First let’s take our sub-graph and turn our nodes into variables:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 850px; margin: 0.6em;&quot; src=&quot;/assets/neo4j-mdm/irish_census_relationship_mapping.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example let’s take resident &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1 r1&lt;/code&gt; (house 1, resident 1) as the resident in question and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h2 r1&lt;/code&gt; as the candidate that we want to compare it to.  This is the sort of query that Neo4j is wonderful at both performing quickly and making easy to formulate.  Let’s look at part of the Ruby code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;

def get_similarity_candidate_relationship_paths
  self.query_as(:h1_r1)
    .match(&apos;(h1:House), (h2:House)&apos;)
    .match(&apos;h1&amp;lt;-[:LIVES_IN]-h1_r1-[sc_1:similarity_candidate]-(h2_r1)-[:LIVES_IN]-&amp;gt;h2&apos;)
    .match(&apos;h1&amp;lt;-[:LIVES_IN]-h1_r2-[sc_2:similarity_candidate]-(h2_r2)-[:LIVES_IN]-&amp;gt;h2&apos;)
    .match(&apos;path1=h1_r1-[:born_to|married_to|grandchild_of|niece_nephew_of|sibling_of|cousin_of|child_in_law_of|step_child_of*1..2]-h1_r2&apos;)
    .match(&apos;path2=h2_r1-[:born_to|married_to|grandchild_of|niece_nephew_of|sibling_of|cousin_of|child_in_law_of|step_child_of*1..2]-h2_r2&apos;)
    .pluck(
      :h2_r1,
      &apos;collect([path1, rels(path1), path2, rels(path2)])&apos;
      ).each_with_object({}) do |(r2, data), result|

    result[r2] = data.inject(0) do |total, (path1, rels1, path2, rels2)|
      relations1 = relation_string_from_path_and_rels(path1, rels1)
      relations2 = relation_string_from_path_and_rels(path2, rels2)

      if relations1 == relations2
        1.0
      elsif score = (RELATION_EQUIVILENCE_SCORES[relations1] || {})[relations2]
        score
      else
        -2.0
      end + total
    end
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we start with a Cypher query using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Query&lt;/code&gt; API from neo4j.rb.  The object upon which we’ve called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_similarity_candidate_relationship_paths&lt;/code&gt; is our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1_r1&lt;/code&gt; anchor.  Note here that we match paths with a length of either one or two relationships long from between two residents of the same house.  Then we return all residents found via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationship from our anchor and the family relationship paths aggregated into an Array.&lt;/p&gt;

&lt;p&gt;Once the Cypher query returns data we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relation_string_from_path_and_rels&lt;/code&gt; which is a way of transforming the path into a string like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-BORN_TO-&amp;gt;&amp;lt;-BORN_TO&lt;/code&gt;.  This string gives us a simple way to express the path between the two residents as a string.&lt;/p&gt;

&lt;p&gt;We then can give a score based on the two paths.  If the paths are the same then we say that the score is 1.0.  If the pair of paths is something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-BORN_TO-&amp;gt;&amp;lt;-BORN_TO&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-SIBLING_OF-&amp;gt;&lt;/code&gt; then we can give a score based on a lookup.  We add these scores up to give us a total score comparing our anchor resident and each of it’s similarity candidates.  All with just one query to the database.&lt;/p&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;p&gt;There are a couple of things that I needed to do to make this work:&lt;/p&gt;

&lt;p&gt;Previously I was simply grabbing one resident at a time, finding all of the similarity candidates, and then creating a set of relationships to link the resident with the candidates and to store the record linkage scores (both the individual scores for fields and the total score).  However this approach requires all of the candidates in the house to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationships in order to compare family relationships.  So I first process all residents for a house to create the similarity candidate relationships and store the record linkage scores and then go through them again with the graph-based comparisons and store that score and update the total.&lt;/p&gt;

&lt;p&gt;Beyond that there is the conceptual problem of determining the scoring when comparing paths.  For example, if somebody was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BORN_TO&lt;/code&gt; the head one year but their spouse takes over as the head, could we say that they’re &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BORN_TO&lt;/code&gt; the spouse if they are are a step-child?  Family relationships are complicated and don’t always fit neatly into our properties and algorithms.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Most record linkage focuses on the properties of an object, but we need to remember that relationships are data about our entities too.  With Neo4j we have a powerful tool for analyzing those relationships natuarally and quickly.  Additionally I have found that the ability to create relationships on the fly to aggregate calculations like the ones discussed above is a wonderful way to find the best solution quickly.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="analysis" /><category term="master-data-management" /><summary type="html">For just over a year I’ve been obsessed on-and-off with a project ever since I stayed in the town of Skibbereen, Ireland. Taking data from the 1901 and 1911 Irish censuses I hoped I would be able to find a way to reliably link resident records from the two together to identify the same residents. Since then I’ve learned a bit about master data management and record linkage and so I thought I would give it another stab. Here I’d like to talk about how I’ve been matching records based on the local data space around objects to improve my record linkage scoring.</summary></entry><entry><title type="html">Analyzing Ruby’s ObjectSpace with Neo4j</title><link href="http://www.brian-underwood.codes//2015/06/03/analyzing_rubys_objectspace_with_neo4j" rel="alternate" type="text/html" title="Analyzing Ruby’s ObjectSpace with Neo4j" /><published>2015-06-03T00:47:00+02:00</published><updated>2015-06-03T00:47:00+02:00</updated><id>http://www.brian-underwood.codes//2015/06/03/analyzing_rubys_objectspace_with_neo4j</id><content type="html" xml:base="http://www.brian-underwood.codes//2015/06/03/analyzing_rubys_objectspace_with_neo4j">&lt;style&gt;
  table {
    border-collapse: collapse;
    width: 600px;
  }
  table, th, td {
    border: 1px solid black;
  }
  td {
    padding: 0.5em;
  }
&lt;/style&gt;

&lt;p&gt;Recently the continuous builds for the &lt;a href=&quot;https://github.com/neo4jrb/neo4j&quot;&gt;neo4j Ruby gem&lt;/a&gt; failed for JRuby because the memory limit had been reached.  I wanted to see if I could use my favorite tool (Neo4j) to analyize the memory usage.  So I threw together &lt;a href=&quot;https://github.com/neo4jrb/neo4j_ruby_object_space&quot;&gt;a bit of Ruby code&lt;/a&gt; to use Ruby’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectSpace.each_object&lt;/code&gt; functionality to dump every object in memory after the test suite of the gem finished (garbage collecting first, of course).  First let’s take a look at the model:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/neo4j-ruby-memory/model.png&quot; style=&quot;width: 600px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A quick Ruby primer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;s are always instantiations of one and only one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;es can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; zero or more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module&lt;/code&gt;s which extend their APIs&lt;/li&gt;
  &lt;li&gt;Everything in Ruby is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;es and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So with that in mind I set out to output some CSVs.  This was my first opportunity to output some CSV files for the &lt;a href=&quot;http://neo4j.com/docs/stable/import-tool.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neo4j-import&lt;/code&gt; tool&lt;/a&gt; and it was quite a straightforward standard to implement.  Here is an example of each of the files that I generated:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objects.csv&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object_id:ID	inspect	:LABEL
70099268550680	&amp;lt;RubyVM::InstructionSequence:block in contains_requirable_file?@/Users/brian/.rvm/rubies/ruby-2.2.0/lib/ruby/2.2.0/rubygems/basic_specification.rb&amp;gt;	Object
70099273105500	RubyVM::InstructionSequence	Object;Class
70099273176540	Class	Object;Class
70099270029100	RSpec::Core::SharedExampleGroup::TopLevelDSL	Object;Module
70099273176580	Module	Object;Class
70099277099900	RSpec::Core::DSL	Object;Module
70099275863180	PP::ObjectMixin	Object;Module
70099278769700	JSON::Ext::Generator::GeneratorMethods::Object	Object;Module
70099273176460	Kernel	Object;Module
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_variables.csv&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:START_ID	:END_ID	variable
70099268552320	70099268552120	@version
70099268552320	70099277643340	@segments
70099268552320	0	@prerelease
70099268552320	-4656870404935510835	@hash
70099268553460	70099268553260	@version
70099268553460	70099277643720	@segments
70099268553460	0	@prerelease
70099268553460	2810968934318335001	@hash
70099268558740	70099272991680	@_declared_property_manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object_classes.csv&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:START_ID	:END_ID
70099273176540	70099273176540
70099273176580	70099273176540
70099277099900	70099273176580
70099275863180	70099273176580
70099278769700	70099273176580
70099273176460	70099273176580
70099270029100	70099273176580
70099273105500	70099273176540
70099268550680	70099273105500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_superclasses.csv&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:START_ID	:END_ID
70271986243040	70271986243080
70272011737340	70271986239340
70271986207920	70271986243120
70271986179720	70271986243120
70271986207000	70271986243120
70271986517200	70271986243120
70271986241140	70271986243120
70271986225760	70271986225920
70271986206080	70271986243120
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_modules.csv&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:START_ID	:END_ID
70099273176580	70099270029100
70099273176580	70099277099900
70099273176580	70099275863180
70099273176580	70099278769700
70099273176580	70099273176460
70099273176540	70099270029100
70099273176540	70099277099900
70099273176540	70099275863180
70099273176540	70099278769700
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, you can see the code for generating these files &lt;a href=&quot;https://github.com/neo4jrb/neo4j_ruby_object_space&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see I chose to make my files tab-separated.  I did this because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect&lt;/code&gt; column was going to have lots of double quotes in it and it would create a simpler file.  I also used the pipe (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;) as the quoting character because of some conflicts with the way Ruby and Neo4j interpret escaping of quoted characters.  Here is the command that I used to import the CSV files into a Neo4j database:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./db/bin/neo4j-import \
        --delimiter TAB \
        --quote &quot;|&quot; \
        --into ./db/data/graph.db \
        --nodes ./objects.csv \
        --relationships:INSTANCE_VARIABLE ./instance_variables.csv \
        --relationships:HAS_CLASS ./object_classes.csv \
        --relationships:INCLUDES_MODULE ./class_modules.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, now we’re cooking with graphs!  What does this look like in the Neo4j web console?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (o:Object) WHERE NOT(o:Class) AND NOT(o:Module) WITH o LIMIT 20
MATCH o-[:HAS_CLASS]-&amp;gt;(c:Class)
OPTIONAL MATCH c-[:INCLUDES_MODULE]-&amp;gt;(m:Module)
RETURN *

&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/neo4j-ruby-memory/console.png&quot; style=&quot;width: 800px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Nice!  As another sanity check, let’s see what our top allocated objects are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (o:Object)-[:HAS_CLASS]-&amp;gt;(c:Class)
WHERE NOT(o:Class) AND NOT(o:Module)
RETURN c.inspect, count(o) ORDER BY count(o) DESC LIMIT 10

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;c.inspect&lt;/th&gt;
      &lt;th&gt;count(o)&lt;/th&gt;
      &lt;th&gt;c.inspect&lt;/th&gt;
      &lt;th&gt;count(o)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;171,082&lt;/td&gt;
      &lt;td&gt;RubyVM::Env&lt;/td&gt;
      &lt;td&gt;17,731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Array&lt;/td&gt;
      &lt;td&gt;53,532&lt;/td&gt;
      &lt;td&gt;Gem::Requirement&lt;/td&gt;
      &lt;td&gt;4,227&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Proc&lt;/td&gt;
      &lt;td&gt;21,894&lt;/td&gt;
      &lt;td&gt;RSpec::Core::Hooks::HookCollection&lt;/td&gt;
      &lt;td&gt;3,252&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RubyVM::InstructionSequence&lt;/td&gt;
      &lt;td&gt;19,416&lt;/td&gt;
      &lt;td&gt;Gem::Dependency&lt;/td&gt;
      &lt;td&gt;2,973&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hash&lt;/td&gt;
      &lt;td&gt;18,081&lt;/td&gt;
      &lt;td&gt;Regexp&lt;/td&gt;
      &lt;td&gt;2,971&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That seems right!  Any experienced Rubyists will know that Ruby will allocate a lot of strings.&lt;/p&gt;

&lt;p&gt;So let’s really get into it and use the power of graphs.  Let’s find out which objects have the most references via instance variables.  This query takes every object in the database as the root of a tree of instance variable references and calculates the total number of descendent objects in that tree.  This should give us an idea for what objects have a lot of other objects depending on them which cannot be garbage collected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

// Count of tree
MATCH (o:Object) WHERE NOT(o:Class) AND NOT(o:Module) WITH o
MATCH o-[:HAS_CLASS]-&amp;gt;(c:Class)
OPTIONAL MATCH path=o-[:INSTANCE_VARIABLE*]-&amp;gt;(other)
RETURN c.inspect, o.inspect, count(other) ORDER BY count(other) DESC LIMIT 10

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;c.inspect&lt;/th&gt;
      &lt;th&gt;o.inspect&lt;/th&gt;
      &lt;th&gt;count(other)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;RSpec::Core::ExampleGroup::Nested_31::Nested_5&lt;/td&gt;
      &lt;td&gt;#&amp;lt;RSpec::Core::ExampleGroup::Nested_31:: Nested_5:0x007f8285c325d0 @__memoized=nil, @prev_wrapped_classes=[Student(name: Object), Teacher(name: Object) …&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neo4j::ActiveNode::Reflection::AssociationReflection&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Neo4j::ActiveNode::Reflection:: AssociationReflection:0x007f828a2fcfb0 @macro=:has_many, @name=:teachers, @association=#&amp;lt;Neo4j::ActiveNode::HasN::Ass …&lt;/td&gt;
      &lt;td&gt;193&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neo4j::ActiveNode::HasN::Association&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Neo4j::ActiveNode::HasN:: Association:0x007f828a2fd5f0 @type=:has_many, @name=:teachers, @direction=:out, @target_class_name_from_name=”Teacher”, @ta …&lt;/td&gt;
      &lt;td&gt;190&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RSpec::Core::Runner&lt;/td&gt;
      &lt;td&gt;#&amp;lt;RSpec::Core::Runner:0x007f82859f89e0 @options=#&amp;lt;RSpec::Core::ConfigurationOptions:0x007f8284241dd8 @args=[], @command_line_options={:files_or_direct …&lt;/td&gt;
      &lt;td&gt;127&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bundler::LazySpecification&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Bundler::LazySpecification:0x007f82853c47b8 @name=”neo4j”, @version=#&amp;lt;Gem::Version “5.0.0.rc.2”&amp;gt;, @dependencies=[&amp;lt;Gem::Dependency type=:runtime name …&lt;/td&gt;
      &lt;td&gt;110&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bundler::LazySpecification&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Bundler::LazySpecification:0x007f82853bdc38 @name=”neo4j-core”, @version=#&amp;lt;Gem::Version “5.0.0.rc.1”&amp;gt;, @dependencies=[&amp;lt;Gem::Dependency type=:runtime …&lt;/td&gt;
      &lt;td&gt;110&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bundler::LazySpecification&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Bundler::LazySpecification:0x007f82853778c8 @name=”parser”, @version=#&amp;lt;Gem::Version “2.2.0.3”&amp;gt;, @dependencies=[&amp;lt;Gem::Dependency type=:runtime name=” …&lt;/td&gt;
      &lt;td&gt;103&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bundler::LazySpecification&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Bundler::LazySpecification:0x007f8285367bd0 @name=”rainbow”, @version=#&amp;lt;Gem::Version “2.0.0”&amp;gt;, @dependencies=[], @platform=”ruby”, @source=#&amp;lt;Bundler …&lt;/td&gt;
      &lt;td&gt;103&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bundler::LazySpecification&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Bundler::LazySpecification:0x007f8285395850 @name=”faraday_middleware-multi_json”, @version=#&amp;lt;Gem::Version “0.0.6”&amp;gt;, @dependencies=[&amp;lt;Gem::Dependency …&lt;/td&gt;
      &lt;td&gt;103&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bundler::LazySpecification&lt;/td&gt;
      &lt;td&gt;#&amp;lt;Bundler::LazySpecification:0x007f8285396d68 @name=”erubis”, @version=#&amp;lt;Gem::Version “2.7.0”&amp;gt;, @dependencies=[], @platform=”ruby”, @source=#&amp;lt;Bundler: …&lt;/td&gt;
      &lt;td&gt;103&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not bad for a query which runs in 6.5 seconds (with 335,446 total objects on my MacBook Air)!&lt;/p&gt;

&lt;p&gt;As part of the import the objects I also create a graph structure to define classes, modules, and their relationships.  Let’s see what are the most &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;d modules in our object space:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;m.inspect&lt;/th&gt;
      &lt;th&gt;count(c)&lt;/th&gt;
      &lt;th&gt;m.inspect&lt;/th&gt;
      &lt;th&gt;count(c)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Kernel&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;RSpec::Core::MockFrameworkAdapter&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PP::ObjectMixin&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;RSpec::Core::Extensions::InstanceEvalWithArgs&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JSON::Ext::Generator::GeneratorMethods::Object&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;RSpec::Core::Pending&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Enumerable&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;ActiveAttr::Matchers&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Comparable&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;SimpleCov::HashMergeHelper&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RSpec::Matchers&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;JSON::Ext::Generator::GeneratorMethods::Hash&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RSpec::Core::SharedExampleGroup&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;RSpec::Core::ExampleGroup::Nested_1::NamedSubjectPreventSuper&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ActiveNodeRelStubHelpers&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;RSpec::Core::ExampleGroup::Nested_1::LetDefinitions&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neo4jSpecHelpers&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;File::Constants&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RSpec::Core::MemoizedHelpers&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;SimpleCov::ArrayMergeHelper&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Looking at this I learned a couple of things I didn’t know about Ruby:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; module is included everywhere (which makes sense)&lt;/li&gt;
  &lt;li&gt;When loading the pretty-print and JSON libraries a corresponding module is included everywhere (which is probably why they aren’t loaded by default)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While we’re here let’s grab a random sample of classes and modules (excluding some ones that I hand-picked which had too many connections to make for a useful graph visualization):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (o:Object)
WHERE (o:Class OR o:Module) AND
      NOT(o.inspect IN [&apos;Class&apos;, &apos;Module&apos;, &apos;Kernel&apos;, &apos;PP::ObjectMixin&apos;]) AND
      NOT o.inspect =~ &quot;JSON::Ext.*&quot;
RETURN o LIMIT 80

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the graph (click to zoom):&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;a href=&quot;/assets/neo4j-ruby-memory/class_module_graph.png&quot;&gt;&lt;img src=&quot;/assets/neo4j-ruby-memory/class_module_graph.png&quot; style=&quot;width: 800px&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;That’s all for now, but please &lt;a href=&quot;https://twitter.com/cheerfulstoic&quot;&gt;let me know&lt;/a&gt; if you have other thoughts for how to use this approach!&lt;/p&gt;

&lt;p&gt;Along a similar line I’ve been thinking about graphing dependency trees like in RubyGems or NPM.  Other project ideas are also welcome!&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="ruby" /><category term="analysis" /><category term="memory" /><summary type="html"></summary></entry><entry><title type="html">Master Data Management Scoring Examples</title><link href="http://www.brian-underwood.codes//2015/05/14/master_data_management_scoring_examples" rel="alternate" type="text/html" title="Master Data Management Scoring Examples" /><published>2015-05-14T18:10:00+02:00</published><updated>2015-05-14T18:10:00+02:00</updated><id>http://www.brian-underwood.codes//2015/05/14/master_data_management_scoring_examples</id><content type="html" xml:base="http://www.brian-underwood.codes//2015/05/14/master_data_management_scoring_examples">&lt;p&gt;A while ago my colleague &lt;a href=&quot;https://twitter.com/mesirii&quot;&gt;Michael&lt;/a&gt; suggested to me that I draw out some examples of how my &lt;a href=&quot;/2015/03/08/making_master_data_management_fun_with_neo4j_-_part_3&quot;&gt;record linkage&lt;/a&gt; algorithm did it’s thing.  In order to do that, I’ve picked some users from both GitHub and StackOverflow which are big names in the Neo4j community to give you the idea.&lt;/p&gt;

&lt;p&gt;For each user in my list of famous Neo4jers I find the user on the other site which my algorithm matches best based on the matching score meeting a threshold.
In that algorithm I match users via attribute pairings (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; on GitHub and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_name&lt;/code&gt; on StackOverflow).
Below I show how these property pairs contribute to each user’s score.&lt;/p&gt;

&lt;h3 id=&quot;the-selected-users&quot;&gt;The selected users&lt;/h3&gt;

&lt;p&gt;Below are the users which I selected.  I selected a set from both GitHub and StackOverflow so that I could test matching in both directions.&lt;/p&gt;

&lt;h4 id=&quot;github&quot;&gt;GitHub&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jexp&quot;&gt;Michael Hunger&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/sarmbruster&quot;&gt;Stefan Armbruster&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/maxdemarzi&quot;&gt;Max De Marzi&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/peterneubauer&quot;&gt;Peter Neubauer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ikwattro&quot;&gt;Christophe Willemsen&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/wfreeman&quot;&gt;Wes Freeman&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/moxious&quot;&gt;moxious&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mneedham&quot;&gt;Mark Needham&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/subvertallchris&quot;&gt;Chris Grigg&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/cheerfulstoic&quot;&gt;Brian Underwood&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/nawroth&quot;&gt;Anders Nawroth&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/akollegger&quot;&gt;Andreas Kollegger&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/thobe&quot;&gt;Tobias Lindaaker&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jakewins&quot;&gt;Jacob Hansson&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/simpsonjulian&quot;&gt;Julian Simpson&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/andreasronge&quot;&gt;Andreas Ronge&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/tbaum&quot;&gt;Thomas Baum&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;stackoverflow&quot;&gt;StackOverflow&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/2920686&quot;&gt;FrobberOfBits&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/232671&quot;&gt;Luanne&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/4187346&quot;&gt;Dave Bennett&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/974731&quot;&gt;cybersam&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/2061244&quot;&gt;albertoperdomo&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/2481199&quot;&gt;jjaderberg&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/256108&quot;&gt;Nicholas&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/users/272109&quot;&gt;David Makogon&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;property-matching-chart&quot;&gt;Property Matching Chart&lt;/h3&gt;

&lt;p&gt;Here is a chart which shows all of the users.  The total bar size represents their total score while each section represents a pair of properties which were chosen for matching.  You’ll notice that seven of the 25 users aren’t matched.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/neo4j-mdm/famous_peeps.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;score-details&quot;&gt;Score Details&lt;/h3&gt;

&lt;p&gt;Here I dig down into the nitty details of the values of interest for each user pair and the scores given for matches on those values.  For each property pair for each user pair I show:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the weight&lt;/li&gt;
  &lt;li&gt;the base score&lt;/li&gt;
  &lt;li&gt;the total score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The weights for each property pair are constant from user to user and are based on an my analysis comparing my human identified results with various weights and thresholds to maximize &lt;a href=&quot;http://en.wikipedia.org/wiki/Precision_and_recall&quot;&gt;precision and recall&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The total score for for each user (not shown here) is the sum of the total scores of the property pairs.  The user pairs which I am displaying below are considered matches because they have the largest score among other pairs and because they match a minimum threshold.&lt;/p&gt;

&lt;style&gt;
table {
  border-collapse: collapse;
}
table, th, td {
  border: 1px solid #CCC;
  padding: 0.3em;
}

&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;cybersam&lt;/td&gt;
      &lt;td&gt;cybersam&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Sam&lt;/td&gt;
      &lt;td&gt;cybersam&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Silicon Valley&lt;/td&gt;
      &lt;td&gt;Silicon Valley&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“cybersam”]&lt;/td&gt;
      &lt;td&gt;[“cybersam”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;77601&lt;/td&gt;
      &lt;td&gt;51509&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.73&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;cybersam&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;davestern&lt;/td&gt;
      &lt;td&gt;Dave Bennett&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.83&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Dave Stern&lt;/td&gt;
      &lt;td&gt;Dave Bennett&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.87&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Calgary&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“davestern”]&lt;/td&gt;
      &lt;td&gt;[“dave bennett”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;76872&lt;/td&gt;
      &lt;td&gt;51521&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;davestern&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;FrobberOfBits&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;FrobberOfBits&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;East Coast, USA&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;[“frobberofbits”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;51799&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;NicholasAStuart&lt;/td&gt;
      &lt;td&gt;Nicholas&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.93&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Nicholas A. Stuart&lt;/td&gt;
      &lt;td&gt;Nicholas&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;San Francisco, CA&lt;/td&gt;
      &lt;td&gt;San Francisco, CA&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“nicholasastuart”]&lt;/td&gt;
      &lt;td&gt;[“nicholas”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;https://github.com/NicholasAStuart&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;64519&lt;/td&gt;
      &lt;td&gt;52854&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;NicholasAStuart&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;lucciano&lt;/td&gt;
      &lt;td&gt;Luanne&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.78&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Luciano Andrade&lt;/td&gt;
      &lt;td&gt;Luanne&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.76&lt;/td&gt;
      &lt;td&gt;1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Mumbai, India&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“lucciano”]&lt;/td&gt;
      &lt;td&gt;[“luanne”, “luannem”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[“thought-bytes.blogspot.in”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;thought-bytes.blogspot.in&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;60299&lt;/td&gt;
      &lt;td&gt;53143&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;lucciano&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;luannem&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;albertoperdomo&lt;/td&gt;
      &lt;td&gt;albertoperdomo&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Alberto Perdomo&lt;/td&gt;
      &lt;td&gt;albertoperdomo&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.99&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Las Palmas de Gran Canaria, Spain&lt;/td&gt;
      &lt;td&gt;Spain&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“albertoperdomo”]&lt;/td&gt;
      &lt;td&gt;[“albertoperdomo”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“albertoperdomo.net”]&lt;/td&gt;
      &lt;td&gt;[“graphenedb.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://albertoperdomo.net&lt;/td&gt;
      &lt;td&gt;graphenedb.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;62234&lt;/td&gt;
      &lt;td&gt;54027&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;albertoperdomo&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;johanlundberg&lt;/td&gt;
      &lt;td&gt;jjaderberg&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.77&lt;/td&gt;
      &lt;td&gt;1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Johan Lundberg&lt;/td&gt;
      &lt;td&gt;jjaderberg&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Stockholm&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“johanlundberg”]&lt;/td&gt;
      &lt;td&gt;[“jjaderberg”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“snakedesert.se”]&lt;/td&gt;
      &lt;td&gt;[“d.phil”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://www.snakedesert.se&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;65150&lt;/td&gt;
      &lt;td&gt;55433&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;johanlundberg&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;maxdemarzi&lt;/td&gt;
      &lt;td&gt;Max De Marzi&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.96&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Max De Marzi&lt;/td&gt;
      &lt;td&gt;Max De Marzi&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;60601&lt;/td&gt;
      &lt;td&gt;Chicago, IL&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“maxdemarzi”]&lt;/td&gt;
      &lt;td&gt;[“max de marzi”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“maxdemarzi.com”]&lt;/td&gt;
      &lt;td&gt;[“maxdemarzi.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;maxdemarzi.com&lt;/td&gt;
      &lt;td&gt;maxdemarzi.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;60207&lt;/td&gt;
      &lt;td&gt;59296&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;maxdemarzi&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;tbaum&lt;/td&gt;
      &lt;td&gt;Thomas&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Thomas Baum&lt;/td&gt;
      &lt;td&gt;Thomas&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.93&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Germany / Dresden&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.88&lt;/td&gt;
      &lt;td&gt;3.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“tbaum”]&lt;/td&gt;
      &lt;td&gt;[“thomas”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[“google.de”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;google.de&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;60777&lt;/td&gt;
      &lt;td&gt;52946&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;tbaum&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;sarmbruster&lt;/td&gt;
      &lt;td&gt;Stefan Armbruster&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.78&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Stefan Armbruster&lt;/td&gt;
      &lt;td&gt;Stefan Armbruster&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Munich, Germany&lt;/td&gt;
      &lt;td&gt;Munich, Germany&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“sarmbruster”]&lt;/td&gt;
      &lt;td&gt;[“stefan armbruster”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“blog.armbruster-it.de”]&lt;/td&gt;
      &lt;td&gt;[“blog.armbruster-it.de”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://blog.armbruster-it.de&lt;/td&gt;
      &lt;td&gt;blog.armbruster-it.de&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.77&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;60881&lt;/td&gt;
      &lt;td&gt;51506&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;sarmbruster&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;mneedham&lt;/td&gt;
      &lt;td&gt;Mark Needham&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.82&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Mark Needham&lt;/td&gt;
      &lt;td&gt;Mark Needham&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;London, United Kingdom&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.74&lt;/td&gt;
      &lt;td&gt;2.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“mneedham”]&lt;/td&gt;
      &lt;td&gt;[“mark needham”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“markhneedham.com”]&lt;/td&gt;
      &lt;td&gt;[“markhneedham.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://www.markhneedham.com/blog&lt;/td&gt;
      &lt;td&gt;markhneedham.com/blog&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.76&lt;/td&gt;
      &lt;td&gt;3.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;60963&lt;/td&gt;
      &lt;td&gt;53357&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;mneedham&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;pombredanne&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Philippe Ombredanne&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“pombredanne”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61003&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;pombredanne&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;jexp&lt;/td&gt;
      &lt;td&gt;Michael Hunger&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Michael Hunger&lt;/td&gt;
      &lt;td&gt;Michael Hunger&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Dresden, Germany&lt;/td&gt;
      &lt;td&gt;Dresden, Germany&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“jexp”]&lt;/td&gt;
      &lt;td&gt;[“michael hunger”, “mesirii”, “jexp”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“jexp.de”]&lt;/td&gt;
      &lt;td&gt;[“spring.neo4j.org”, “die-buchbar.de”, “mg.mud.de”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://jexp.de&lt;/td&gt;
      &lt;td&gt;neo4j.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61063&lt;/td&gt;
      &lt;td&gt;51548&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;jexp&lt;/td&gt;
      &lt;td&gt;jexp&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;mesirii&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;akollegger&lt;/td&gt;
      &lt;td&gt;akollegger&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Andreas Kollegger&lt;/td&gt;
      &lt;td&gt;akollegger&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;San Francisco, CA&lt;/td&gt;
      &lt;td&gt;California&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“akollegger”]&lt;/td&gt;
      &lt;td&gt;[“akollegger”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://neo4j.com&lt;/td&gt;
      &lt;td&gt;neo4j.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.85&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61069&lt;/td&gt;
      &lt;td&gt;58359&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;akollegger&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;simpsonjulian&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Julian Simpson&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Auckland, New Zealand&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“simpsonjulian”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“build-doctor.com”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://www.build-doctor.com&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61073&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;simpsonjulian&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;jakewins&lt;/td&gt;
      &lt;td&gt;jakewins&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Jacob Hansson&lt;/td&gt;
      &lt;td&gt;jakewins&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Sweden&lt;/td&gt;
      &lt;td&gt;Stockholm, Sweden&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“jakewins”]&lt;/td&gt;
      &lt;td&gt;[“jakewins”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“voltvoodoo.com”]&lt;/td&gt;
      &lt;td&gt;[“jakewins.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://voltvoodoo.com&lt;/td&gt;
      &lt;td&gt;jakewins.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61077&lt;/td&gt;
      &lt;td&gt;57589&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;jakewins&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;peterneubauer&lt;/td&gt;
      &lt;td&gt;Peter Neubauer&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.98&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Peter Neubauer&lt;/td&gt;
      &lt;td&gt;Peter Neubauer&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Malmö, Sweden&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“peterneubauer”]&lt;/td&gt;
      &lt;td&gt;[“peter neubauer”, “peterneubauer”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[“mapillary.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;mapillary.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61089&lt;/td&gt;
      &lt;td&gt;55637&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;peterneubauer&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;peterneubauer&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;thobe&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Tobias Lindaaker&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“thobe”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“journal.thobe.org”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://journal.thobe.org&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61097&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;thobe&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;nawroth&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Anders Nawroth&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Skåne, Sweden&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“nawroth”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“anders.nawroth.se”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;www.anders.nawroth.se&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61099&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;nawroth&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;wfreeman&lt;/td&gt;
      &lt;td&gt;Wes Freeman&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.88&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Wes Freeman&lt;/td&gt;
      &lt;td&gt;Wes Freeman&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Fairfax, VA&lt;/td&gt;
      &lt;td&gt;Fairfax, VA&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“wfreeman”]&lt;/td&gt;
      &lt;td&gt;[“wes freeman”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“wes.skeweredrook.com”]&lt;/td&gt;
      &lt;td&gt;[“wes.skeweredrook.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://wes.skeweredrook.com&lt;/td&gt;
      &lt;td&gt;wes.skeweredrook.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.91&lt;/td&gt;
      &lt;td&gt;4.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61111&lt;/td&gt;
      &lt;td&gt;53606&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;wfreeman&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;ikwattro&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Christophe Willemsen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Belgium&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“ikwattro”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;https://twitter.com/#!/ikwattro&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61128&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;ikwattro&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;subvertallchris&lt;/td&gt;
      &lt;td&gt;subvertallchris&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Chris Grigg&lt;/td&gt;
      &lt;td&gt;subvertallchris&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Brooklyn, NY&lt;/td&gt;
      &lt;td&gt;Brooklyn, NY&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“subvertallchris”, “subvertallmedia”]&lt;/td&gt;
      &lt;td&gt;[“subvertallchris”, “subvertallmedia”, “neo4jrb”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;7.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[“blog.subvertallmedia.com”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;https://twitter.com/subvertallmedia&lt;/td&gt;
      &lt;td&gt;blog.subvertallmedia.com&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61285&lt;/td&gt;
      &lt;td&gt;51540&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;subvertallchris&lt;/td&gt;
      &lt;td&gt;neo4jrb&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;subvertallmedia&lt;/td&gt;
      &lt;td&gt;subvertallmedia&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;cheerfulstoic&lt;/td&gt;
      &lt;td&gt;Brian Underwood&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Brian Underwood&lt;/td&gt;
      &lt;td&gt;Brian Underwood&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Travelling&lt;/td&gt;
      &lt;td&gt;Travelling&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“cheerfulstoic”]&lt;/td&gt;
      &lt;td&gt;[“brian underwood”, “cheerfulstoic”, “neo4jrb”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[“brian-underwood.codes”]&lt;/td&gt;
      &lt;td&gt;[“grandadventures-householdchores.com”, “brian-underwood.codes”]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://www.brian-underwood.codes/&lt;/td&gt;
      &lt;td&gt;brian-underwood.codes&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.77&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61327&lt;/td&gt;
      &lt;td&gt;51500&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;cheerfulstoic&lt;/td&gt;
      &lt;td&gt;neo4jrb&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;cheerfulstoic&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;moxious&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“moxious”]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;61948&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;moxious&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GH Prop&lt;/th&gt;
      &lt;th&gt;SO Prop&lt;/th&gt;
      &lt;th&gt;GH Value&lt;/th&gt;
      &lt;th&gt;SO Value&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Base Score&lt;/th&gt;
      &lt;th&gt;Weighted Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;andreasronge&lt;/td&gt;
      &lt;td&gt;Andreas Ronge&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.99&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;display_name&lt;/td&gt;
      &lt;td&gt;Andreas Ronge&lt;/td&gt;
      &lt;td&gt;Andreas Ronge&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;location&lt;/td&gt;
      &lt;td&gt;Malmö, Sweden&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;usernames&lt;/td&gt;
      &lt;td&gt;[“andreasronge”, “ronge”]&lt;/td&gt;
      &lt;td&gt;[“andreas ronge”]&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;uncommon_domains&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blog&lt;/td&gt;
      &lt;td&gt;website_url&lt;/td&gt;
      &lt;td&gt;http://twitter.com/ronge&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;image_comparison&lt;/td&gt;
      &lt;td&gt;62280&lt;/td&gt;
      &lt;td&gt;55831&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.73&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;github_username&lt;/td&gt;
      &lt;td&gt;andreasronge&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;twitter_username&lt;/td&gt;
      &lt;td&gt;ronge&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="master-data-management" /><category term="stackoverflow" /><category term="github" /><category term="analysis" /><summary type="html">A while ago my colleague Michael suggested to me that I draw out some examples of how my record linkage algorithm did it’s thing. In order to do that, I’ve picked some users from both GitHub and StackOverflow which are big names in the Neo4j community to give you the idea.</summary></entry><entry><title type="html">Running a Neo4j Cypher Introduction Workshop</title><link href="http://www.brian-underwood.codes//2015/04/16/running_a_neo4j_intro_workshop" rel="alternate" type="text/html" title="Running a Neo4j Cypher Introduction Workshop" /><published>2015-04-16T14:23:00+02:00</published><updated>2015-04-16T14:23:00+02:00</updated><id>http://www.brian-underwood.codes//2015/04/16/running_a_neo4j_intro_workshop</id><content type="html" xml:base="http://www.brian-underwood.codes//2015/04/16/running_a_neo4j_intro_workshop">&lt;p&gt;Last night I ran a very successful workshop at the &lt;a href=&quot;http://www.meetup.com/Friends-of-Neo4j-Stockholm/&quot;&gt;Friends of Neo4j Stockholm&lt;/a&gt; meetup group.  The format was based on a workshop that I attended in San Francisco while the World Cup was going on and was based around investigating a dataset of previous World Cup matches.  Roughly the format was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A short presentation introducing the &lt;a href=&quot;http://neo4j.com/developer/cypher-query-language/&quot;&gt;Cypher query language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A one to two hour section allowing people to apply what they’ve learned in the Neo4j web console by formulating questions and creating queries to answer those questions&lt;/li&gt;
  &lt;li&gt;A presentation section where participants are invited up to present&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the World Cup, Mark Needham and the Neo4j team put together a great &lt;a href=&quot;http://worldcup.neo4j.org/&quot;&gt;resource website&lt;/a&gt; sharing results and information about the dataset which can be loading via &lt;a href=&quot;https://github.com/mneedham/neo4j-worldcup&quot;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;beforehand&quot;&gt;Beforehand&lt;/h2&gt;

&lt;p&gt;Before &lt;a href=&quot;http://www.meetup.com/Friends-of-Neo4j-Stockholm/events/221673524/&quot;&gt;the workshop&lt;/a&gt; I had asked people to &lt;a href=&quot;https://www.youtube.com/watch?v=V7f2tGsNSck&quot;&gt;install Neo4j&lt;/a&gt; and set up either the World Cup dataset or a &lt;a href=&quot;https://github.com/cheerfulstoic/neo4j_summer_olympics&quot;&gt;Summer Olympics&lt;/a&gt; dataset which I had also created for their use.  Both datasets had instructions and load scripts to make it easy to set up.&lt;/p&gt;

&lt;h2 id=&quot;the-presentation&quot;&gt;The Presentation&lt;/h2&gt;

&lt;p&gt;I used a &lt;a href=&quot;http://www.slideshare.net/maxdemarzi/cypher-12154713&quot;&gt;slideshow from Max De Marzi&lt;/a&gt; which I updated for Neo4j 2.x and simplified for an introduction session.  You can see my slideshow &lt;a href=&quot;http://www.slideshare.net/BrianUnderwood2/intro-to-cypher-47072474&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also improvised a bit as I presented.  One of the biggest things that I wish I had put in was an introduction to Neo4j concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Nodes&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Hold properties (key-value stores)&lt;/li&gt;
      &lt;li&gt;Have &lt;strong&gt;zero or more “labels”&lt;/strong&gt; (somewhat analogous to SQL tables)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Relationships&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Also hold properties&lt;/li&gt;
      &lt;li&gt;Have &lt;strong&gt;exactly one “type”&lt;/strong&gt; (describing how/why the relationship is connecting the nodes)&lt;/li&gt;
      &lt;li&gt;Always specify a direction from one node to another&lt;/li&gt;
      &lt;li&gt;Relationships can be queried in either direction or without regard to direction without a performance cost&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also discussed a number of other issues which aren’t explicitly laid out in the presentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I talked about Neo4j internal IDs and how they shouldn’t be used for long-term identification of nodes (as future versions of Neo4j may shuffle them around for performance)&lt;/li&gt;
  &lt;li&gt;I explained parameters and talked about why they should be used (for performance and to prevent injection vulnerabilities)&lt;/li&gt;
  &lt;li&gt;I paused briefly to ask for questions after introducing each new concept&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-working-session&quot;&gt;The Working Session&lt;/h2&gt;

&lt;p&gt;As much as I love to hear myself talk, I really enjoyed walking around and checking in with people and answering their questions.  I can very hard to address every possible concern, but it’s much better to see how people try to do things and help them as they go.  For example, in my presentation I mentioned Neo4j’s syntax for matching values:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MATCH (p:Person {name: &apos;Jim&apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… works the same as …&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MATCH (p:Person) WHERE p.name = &apos;Jim&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course I forgot to explain that this syntax is only for exact matches and doesn’t work for things like regular expressions or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN&lt;/code&gt; clauses.&lt;/p&gt;

&lt;h2 id=&quot;project-presentations&quot;&gt;Project Presentations&lt;/h2&gt;

&lt;p&gt;When I attended the World Cup workshop in San Francisco there were a few nice presentations about what people had been working on.  During my session nobody wanted to present.  Everybody was very engaged in working on their queries, however, so I didn’t push it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The workshop was a really fun way to get people using Neo4j really quickly.  It can feel a bit strange to simply give people some datasets and ask them to do something with it, but the freedom to be creative helped both the participants and me be really excited about working with Neo4j.  I look forward to doing more workshops again in the future!&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="advocacy" /><summary type="html">Last night I ran a very successful workshop at the Friends of Neo4j Stockholm meetup group. The format was based on a workshop that I attended in San Francisco while the World Cup was going on and was based around investigating a dataset of previous World Cup matches. Roughly the format was:</summary></entry><entry><title type="html">Making Master Data Management Fun with Neo4j - Part 3</title><link href="http://www.brian-underwood.codes//2015/03/08/making_master_data_management_fun_with_neo4j_-_part_3" rel="alternate" type="text/html" title="Making Master Data Management Fun with Neo4j - Part 3" /><published>2015-03-08T20:31:00+01:00</published><updated>2015-03-08T20:31:00+01:00</updated><id>http://www.brian-underwood.codes//2015/03/08/making_master_data_management_fun_with_neo4j_-_part_3</id><content type="html" xml:base="http://www.brian-underwood.codes//2015/03/08/making_master_data_management_fun_with_neo4j_-_part_3">&lt;p&gt;In my last two posts I covered the process of importing data from &lt;a href=&quot;/2015/02/16/making_master_data_management_fun_with_neo4j_-_part_1&quot;&gt;StackOverflow&lt;/a&gt; and &lt;a href=&quot;/2015/02/22/making_master_data_management_fun_with_neo4j_-_part_2&quot;&gt;GitHub&lt;/a&gt; for the purpose of creating a combined MDM database.  Now we get to the really fun stuff: today I show you how I tied the data together!&lt;/p&gt;

&lt;h2 id=&quot;tying-the-data-together&quot;&gt;Tying the data together&lt;/h2&gt;

&lt;p&gt;The most obvious entities to link between StackOverflow and GitHub is the user profiles.  Unfortuately users don’t always have two profiles, don’t fill out both profiles, or just don’t have perfectly matching information between the two.  To this end I built &lt;a href=&quot;http://en.wikipedia.org/wiki/Record_linkage&quot;&gt;record linkage&lt;/a&gt; tools which helped me make links between users.&lt;/p&gt;

&lt;p&gt;My goal is to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; label which ties together nodes from GitHub and StackOverflow (and potentially other sites) as seen below:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/neo4j-mdm/person_node.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;standardization&quot;&gt;Standardization&lt;/h3&gt;

&lt;p&gt;My first step to linking records is to standardize data as much as possible.  To this end I do a number of things:&lt;/p&gt;

&lt;h4 id=&quot;stackoverflow-users&quot;&gt;StackOverflow users&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;website_url&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about_me&lt;/code&gt; properties:
    &lt;ul&gt;
      &lt;li&gt;Pull the Twitter username to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;twitter_username&lt;/code&gt; property if there is a URL which points to twitter&lt;/li&gt;
      &lt;li&gt;Pull the GitHub username to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github_username&lt;/code&gt; property if there is a URL which points to twitter&lt;/li&gt;
      &lt;li&gt;Extract all URIs to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uris&lt;/code&gt; property as an array (no URI protocol or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extract any E-Mail addresses from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about_me&lt;/code&gt; property to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emails&lt;/code&gt; property&lt;/li&gt;
  &lt;li&gt;Further reduce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uris&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emails&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domains&lt;/code&gt; property (no paths)&lt;/li&gt;
  &lt;li&gt;Make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usernames&lt;/code&gt; property with the GitHub and Twitter usernames as well as the StackOverflow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;github-users&quot;&gt;GitHub users&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Extract the Twitter username from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt; property if it points to twitter&lt;/li&gt;
  &lt;li&gt;Standardize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog&lt;/code&gt; property to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uris&lt;/code&gt; property as an array (no URL protocol or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Further reduce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uris&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domains&lt;/code&gt; property (no paths)&lt;/li&gt;
  &lt;li&gt;Make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usernames&lt;/code&gt; property with the GitHub and Twitter usernames&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;post-processing&quot;&gt;Post-processing&lt;/h4&gt;

&lt;p&gt;All of the above generated properties get downcased, stripped of extra whitespace, and stored without duplicates.&lt;/p&gt;

&lt;p&gt;After all domains have been looked for, I run the followed to extract any domains which have been used more than once to find and eliminate domains like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmail.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neo4j.com&lt;/code&gt;, etc…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby line-numbers&quot;&gt;

query.match(u: :User).unwind(domain: &apos;u.domains&apos;).
  with(:domain, count: &apos;count(domain)&apos;).where(&apos;count &amp;gt; 1&apos;).
  pluck(:domain)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;linkage&quot;&gt;Linkage&lt;/h3&gt;

&lt;p&gt;With the data standardized we can now easily do record comparison and scoring.  Here I go through the millions of combinations of user pairings and give each of them a score.  For each pairing I want to create a relationship in the database so that I don’t need to calculate the score again.  Since I don’t want to have millions of relationships connecting every single user to every other user, I only create relationships above a score threshold.&lt;/p&gt;

&lt;p&gt;I created a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectIdentifier&lt;/code&gt; which allows me to create rules for comparing and scoring records.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby line-numbers&quot;&gt;

identifier = ObjectIdentifier.new do |config|
  config.default_threshold = 0.8
  config.default_weight = 1.0

  config.add_matcher :name, :display_name, &amp;amp;fuzzy_string_matcher
  config.add_matcher :login, :display_name, &amp;amp;fuzzy_string_matcher
  config.add_matcher :blog, :website_url, &amp;amp;fuzzy_string_matcher
  config.add_matcher :location, :location, &amp;amp;fuzzy_string_matcher

  config.add_matcher :login, :github_username, weight: 2.0, &amp;amp;exact_string_matcher
  config.add_matcher :twitter_username, :twitter_username, weight: 2.0, &amp;amp;exact_string_matcher

  config.add_matcher :domains, :domains, threshold: 0.98, &amp;amp;array_fuzzy_string_matcher
  config.add_matcher :usernames, :usernames, threshold: 0.98, &amp;amp;array_exact_string_matcher

end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that there are anonymous functions for both fuzzy and exact string matching.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;identifier&lt;/code&gt; object I can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;identifier.classify_hash(ghu, sou)&lt;/code&gt; to get the following result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby line-numbers&quot;&gt;

{
                    [ :name, :display_name ] =&amp;gt; 0.9769319492502884,
                   [ :login, :display_name ] =&amp;gt; 0.9769319492502884,
                     [ :blog, :website_url ] =&amp;gt; 0.0,
                    [ :location, :location ] =&amp;gt; 1.0,
                [ :login, :github_username ] =&amp;gt; 0.0,
    [ :twitter_username, :twitter_username ] =&amp;gt; 0.0,
                      [ :domains, :domains ] =&amp;gt; 0.0,
                  [ :usernames, :usernames ] =&amp;gt; 0.0,
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;identifier&lt;/code&gt; object, I then compare every combination of users between GitHub and StackOverflow.  With &lt;strong&gt;2,312&lt;/strong&gt; StackOverflow users and &lt;strong&gt;6,255&lt;/strong&gt; GitHub users there are &lt;strong&gt;14,461,560&lt;/strong&gt; potential pairs, which can take some time.&lt;/p&gt;

&lt;p&gt;For each pairing my script gets the result hash and calculates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;score&lt;/code&gt; as the sum of the Hash values.  If that score is above a threshold, it creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMPUTER_IDENTIFIED&lt;/code&gt; Neo4j relationship to represent a hit.  The relationship stores the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;score&lt;/code&gt; as well as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash&lt;/code&gt; property with a JSON representation of the result for debugging.&lt;/p&gt;

&lt;h3 id=&quot;phash&quot;&gt;pHash&lt;/h3&gt;

&lt;p&gt;While comparing strings to strings I realized there was another aspect of the profile that I was missing: The profile photo.&lt;/p&gt;

&lt;p&gt;If I could do fuzzy comparisons against the user images I could narrow down the results even further.  Fortunately the &lt;a href=&quot;https://github.com/westonplatter/phashion&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phashion&lt;/code&gt;&lt;/a&gt; gem provides an implementation of the &lt;a href=&quot;http://www.phash.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pHash&lt;/code&gt;&lt;/a&gt; algorithm to do just that.  So I wrote a quick script to &lt;a href=&quot;https://github.com/neo4jrb/neo4j-mdm-linking/blob/master/image_download.rb&quot;&gt;download the profile photos&lt;/a&gt; locally and then another to &lt;a href=&quot;https://github.com/neo4jrb/neo4j-mdm-linking/blob/master/image_match.rb&quot;&gt;compare the millions of combinations&lt;/a&gt;.  With all of that downloading and pHashing, I found that I also needed to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; gem to complete in a reasonable amount of time.&lt;/p&gt;

&lt;p&gt;So that I didn’t need to compare photos during my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectIdentifier&lt;/code&gt; process, I simply created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILAR_IMAGE_TO&lt;/code&gt; relationship between users to store the result of the pHash (a value between 1 and 15 where 1 is the closest perceived match).&lt;/p&gt;

&lt;p&gt;Using Neo4j I don’t need to worry about table structure or if I should create a collection or embed in existing objects.  I can create whatever links between users that I need as I play with algorithms that will work for my purpose.&lt;/p&gt;

&lt;h2 id=&quot;man-vs-machine&quot;&gt;Man vs. Machine&lt;/h2&gt;

&lt;p&gt;To help guide my algorithms I used the only thing that I had available to me that could do a reasonable comparison of profiles: me.  I turned my project into a Rails app which could show my two profiles side-by-side:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 800px&quot; src=&quot;/assets/neo4j-mdm/profile_comparison.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This view would show me a randomly chosen pair of users.  80% of the time those users were chosen because I had algorithmically determined some linkage between them.  20% of the time it would just show me a randomly chosen set of two users which hadn’t already been matched to acts as a control group.  I created five links along the top of the page (“Definitely not”, “Probably not”, “Don’t know”, “Probably”, and “Definitely”) and threw in a bit of CoffeeScript to let me choose them via arrow keys.&lt;/p&gt;

&lt;p&gt;In making decisions on hundres of pairs of profiles, a number of questions occurred to me:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;How should do I choose between the five levels?&lt;/dt&gt;
&lt;dd&gt;
  I made some rules to describe how I evaluate the evidence.  By evidence I mean comparing name, location, photo, etc...

  &lt;ul&gt;
    &lt;li&gt;two pieces of matching evidence mean &quot;Probably&quot;&lt;/li&gt;
    &lt;li&gt;three pieces of matching evidence mean &quot;Definitely&quot;&lt;/li&gt;
    &lt;li&gt;two pieces of contradictory evidence means &quot;Probably not&quot;&lt;/li&gt;
    &lt;li&gt;three pieces of contradictory evidence means &quot;Definitely not&quot;&lt;/li&gt;
  &lt;/ul&gt;

  While I placed &quot;Not sure&quot; in the middle, that was a special case which means that I don&apos;t have enough evidence.
&lt;/dd&gt;

&lt;dt&gt;Should I follow links and otherwise research the users?&lt;/dt&gt;
&lt;dd&gt;No.  If I want to determine how well my matching algorithms work, I should use only same data that they have.&lt;/dd&gt;

&lt;dt&gt;What about pictures?&lt;/dt&gt;
&lt;dd&gt;I happen to be a human and humans are pretty good at comparing photos, particularly photos of people.  I was torn about this, but decided that if two photos were obviously not the same person, I should classify the profiles as different.&lt;/dd&gt;

&lt;/dl&gt;

&lt;h2 id=&quot;analyzing-the-result&quot;&gt;Analyzing the result&lt;/h2&gt;

&lt;p&gt;To figure out how well my classification algorithm worked I turned, of course, to &lt;a href=&quot;http://www.r-project.org/&quot;&gt;R&lt;/a&gt;.  Using &lt;a href=&quot;https://github.com/nicolewhite/RNeo4j&quot;&gt;RNeo4j&lt;/a&gt; I run a query to get the human score (from &lt;strong&gt;-2&lt;/strong&gt; as ‘Definitely not’ and &lt;strong&gt;2&lt;/strong&gt; as ‘Definitely’) and the computer score (for the rules I specified this runs from &lt;strong&gt;0&lt;/strong&gt; to about &lt;strong&gt;6&lt;/strong&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;

query &amp;lt;- &quot;MATCH
          (ghu:User:GitHub)-[ci:COMPUTER_IDENTIFIED]-(u:User),
          MATCH ghu-[i:IDENTIFIED]-u
        RETURN ci.score, toInt(i.index)&quot;
result &amp;lt;- cypher(graph, query)

plot(result[[2]], result[[1]], xlab = &quot;Human Score&quot;, ylab = &quot;ObjectIdentifier score&quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…and plot the results…&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/neo4j-mdm/human_vs_computer.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This shows me that I should be able to relatively safely classify an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectIdentifier&lt;/code&gt; score of around &lt;strong&gt;3&lt;/strong&gt; and up as the same user.  A score of &lt;strong&gt;2.5&lt;/strong&gt; and above looks promising, though looking in that range for users with a human classification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Not sure&lt;/code&gt; there are some false positives.  I suspect I can improve the correlation between the two by adjusting the algorithm scoring/weights.&lt;/p&gt;

&lt;p&gt;That’s plenty to digest for now, so next time I’ll show the sorts of queries that can be run on the linked database!  You can see all the code on the &lt;a href=&quot;https://github.com/neo4jrb/neo4j-mdm-linking&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to talk more in person, feel free to drop by one of my upcoming &lt;a href=&quot;/engagements&quot;&gt;speaking engagements&lt;/a&gt;!&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="master-data-management" /><category term="phash" /><category term="r" /><category term="stackoverflow" /><category term="github" /><summary type="html">In my last two posts I covered the process of importing data from StackOverflow and GitHub for the purpose of creating a combined MDM database. Now we get to the really fun stuff: today I show you how I tied the data together!</summary></entry></feed>