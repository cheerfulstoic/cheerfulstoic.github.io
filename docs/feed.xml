<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-09T10:37:48+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">brian-underwood.blogs</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Brian Underwood</name></author><entry><title type="html">Let Your Database Update You with EctoWatch</title><link href="http://localhost:4000/elixir/2024/06/27/let_your_database_update_you_with_ectowatch" rel="alternate" type="text/html" title="Let Your Database Update You with EctoWatch" /><published>2024-06-27T00:00:00+02:00</published><updated>2024-06-27T00:00:00+02:00</updated><id>http://localhost:4000/elixir/2024/06/27/let_your_database_update_you_with_ectowatch</id><content type="html" xml:base="http://localhost:4000/elixir/2024/06/27/let_your_database_update_you_with_ectowatch">&lt;p&gt;Elixir allows application developers to create very parallel and very complex systems. Tools like Phoenix PubSub and LiveView thrive on this property of the language, making it very easy to develop functionality that requires continuous updates to users and clients.&lt;/p&gt;

&lt;p&gt;But one thing that has often frustrated me is how to cleanly design an application to respond to database record updates.&lt;/p&gt;

&lt;p&gt;A typical pattern that I’ve used is to have a dedicated function which makes a database change (e.g &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shipping.insert_event&lt;/code&gt;). This function can contain a post-update step which sends out, for example, a PubSub broadcast. But this relies on the team using that function consistently. If there are other update functions (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shipping.insert_delivery&lt;/code&gt;) they also need to do the broadcast.&lt;/p&gt;

&lt;p&gt;But the most fool-proof solution would be to have the &lt;strong&gt;database&lt;/strong&gt; update the &lt;strong&gt;application&lt;/strong&gt; whenever there is a change. Not only would this avoid needing to make sure all update functions send out broadcasts, but it also makes sure that the correct actions are taken whenever some external task or application updates the database directly.&lt;/p&gt;

&lt;p&gt;While I knew that PostgreSQL had functionality to inform my applications about updates it always seemed intimidating. So I finally decided to figure out how it worked and to make a library! I’d like to introduce EctoWatch which is my attempt to implement this pattern in the simplest way possible.&lt;/p&gt;

&lt;h1 id=&quot;why-broadcast-database-updates&quot;&gt;Why Broadcast Database Updates?&lt;/h1&gt;

&lt;p&gt;Aside from the obvious case of updating LiveViews, there are a number of things you might want to do in response to record changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;redoing a calculation/cache when source information changes&lt;/li&gt;
  &lt;li&gt;sending out emails about a change&lt;/li&gt;
  &lt;li&gt;sending out webhook requests&lt;/li&gt;
  &lt;li&gt;updating a GraphQL subscription&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you insert a new status event for a tracked package, you may want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;update any webpages/applications currently tracking the package&lt;/li&gt;
  &lt;li&gt;send updates about important events (like the package being delivered)&lt;/li&gt;
  &lt;li&gt;recalculate and update the estimated delivery date&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;using-ectowatch&quot;&gt;Using EctoWatch&lt;/h1&gt;

&lt;p&gt;EctoWatch allows you to set up watchers in your application’s supervision tree which can track inserts, updates, and deletes on Ecto schemas which are backed by PostgreSQL tables:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;repo:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;pub_sub:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PubSub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;watchers:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then processes can subscribe to the broadcasts sent by the watchers:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Shipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your process just needs to get updates about a specific record an ID can be given:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;EctoWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then finally the module that implements your process (LiveView, GenServer, etc…) can handle messages about records:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# LiveView example&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_delete_by_dom_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;users-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also define which columns trigger messages on updates as well as which values (in addition to the ID) to send with messages. Definitely check out the &lt;a href=&quot;https://github.com/cheerfulstoic/ecto_watch&quot;&gt;repo’s README&lt;/a&gt; for more details on how to use EctoWatch!&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;I believe that &lt;a href=&quot;https://github.com/cheerfulstoic/ecto_watch&quot;&gt;EctoWatch&lt;/a&gt; can be a powerful new way to simplify how we deal with database changes. Allowing a quick configuration of watchers and using simple message passing with Phoenix PubSub, you can separate the concern of &lt;strong&gt;making a change&lt;/strong&gt; from the concern of &lt;strong&gt;what happens as a result&lt;/strong&gt; of the change. This allows your code to be more easily readable and refactorable.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><summary type="html">Elixir allows application developers to create very parallel and very complex systems. Tools like Phoenix PubSub and LiveView thrive on this property of the language, making it very easy to develop functionality that requires continuous updates to users and clients.</summary></entry><entry><title type="html">Lifting Your Loads for Maintainable Elixir Applications</title><link href="http://localhost:4000/elixir/2023/06/15/lifting-your-loads-for-maintainable-elixir-applications" rel="alternate" type="text/html" title="Lifting Your Loads for Maintainable Elixir Applications" /><published>2023-06-15T00:00:00+02:00</published><updated>2023-06-15T00:00:00+02:00</updated><id>http://localhost:4000/elixir/2023/06/15/lifting-your-loads-for-maintainable-elixir-applications</id><content type="html" xml:base="http://localhost:4000/elixir/2023/06/15/lifting-your-loads-for-maintainable-elixir-applications">&lt;p&gt;(This post was originally created for the Erlang Solutions blog.  The original can be found &lt;a href=&quot;https://www.erlang-solutions.com/blog/lifting-your-loads-for-maintainable-elixir-applications/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This post will discuss one particular aspect of designing Elixir applications using the Ecto library: separating data loading from using the data which is loaded.  I will lay out the situations and present some solutions, including a new library called &lt;a href=&quot;https://github.com/cheerfulstoic/ecto_require_associations&quot;&gt;ecto_require_associations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Applications will differ, but let’s look at &lt;a href=&quot;https://github.com/plausible/analytics/blob/7d935b79bf516deaa0175ffe1b07784a8c72f3c2/lib/plausible/billing/plans.ex#LL39C1-L71C1&quot;&gt;this example&lt;/a&gt; from the Plausible Analytics repo[1]:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plans_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# … other code …&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;raw_plans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1_plans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v1_plans&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2_plans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v2_plans&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3_plans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v3_plans&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sandbox_plans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sandbox_plans&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# … other code …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# … other code …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription&lt;/code&gt; association is preloaded for the given user, which is then immediately used as part of the logic of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plans_for/1&lt;/code&gt;.  I’d like to try to convince you that in cases like this, it would be better to “lift” that loading of data out of the function.&lt;/p&gt;

&lt;p&gt;Let’s start with a brief background on Ecto:&lt;/p&gt;

&lt;h1 id=&quot;the-ecto-library&quot;&gt;The Ecto Library&lt;/h1&gt;

&lt;p&gt;Ecto was uses the “repository pattern”. With Elixir being a language drawing a lot of people from the Ruby community, this was a departure from the “active record pattern” used in the “ActiveRecord” library made popular by Ruby on Rails. This pattern uses classes to fetch data (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User.find(id)&lt;/code&gt;) and object methods to update data (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.save&lt;/code&gt;). Since “encapsulation” is a fundamental aspect of object-oriented programming, it seems logical at first to hide away the database access in this way. Many found, however, that while encapsulation of business logic makes sense, also encapsulating the database logic often led to complexity when trying to control the lifecycle of a record.&lt;/p&gt;

&lt;p&gt;The repository pattern – as implemented by Ecto – requires explicit use of a “Repo” module for all queries to and from the database. With this separation of database access, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ecto.Schema&lt;/code&gt; modules can focus on defining application data and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ecto.Changeset&lt;/code&gt; module focus on validating and transforming application data.&lt;/p&gt;

&lt;p&gt;This separation is made very clear in Ecto’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; which states: “Ecto is also commonly used to map data from any source into Elixir structs, whether they are backed by a database or not.”&lt;/p&gt;

&lt;p&gt;Even if you’re fairly familiar with Ecto, I highly recommend watching Darin Wilson’s &lt;a href=&quot;https://www.youtube.com/watch?app=desktop&amp;amp;v=YQxopjai0CU&quot;&gt;“Thinking in Ecto”&lt;/a&gt; presentation for a really good overview of the hows and whys of Ecto.&lt;/p&gt;

&lt;p&gt;Ecto’s separation of a repository layer makes even more sense in the context of functional programming.  For context in discussing solutions to the problem presented above, it’s important to understand a bit about functional programming.&lt;/p&gt;

&lt;p&gt;One big idea in functional programming (or specifically &lt;a href=&quot;https://en.wikipedia.org/wiki/Purely_functional_programming&quot;&gt;“purely functional programming”&lt;/a&gt;) is the notion of minimising and isolating side-effects. A function with side-effects is one which interacts with some global state such as memory, a file, or a database. Side-effects are commonly thought of as changing global state, but &lt;em&gt;reading&lt;/em&gt; global state means that the output of the function could change depending on when it’s run.&lt;/p&gt;

&lt;p&gt;What benefits does avoiding side-effects give us?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separating database access from operations on data is a great separation of concerns which can lead to more modular and therefore more maintainable code.&lt;/li&gt;
  &lt;li&gt;Defining a function where the output depends completely on the input makes the function easier to understand and therefore easier to use and maintain.&lt;/li&gt;
  &lt;li&gt;Automated tests for functions without side-effects can be much simpler because you don’t need to setup external state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-solution&quot;&gt;A Solution&lt;/h1&gt;

&lt;p&gt;A first approach to lifting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repo.preload&lt;/code&gt; in the example above would be to do just that. That would suddenly make the function “pure” and dependent only on the caller passing in a value for the user’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription&lt;/code&gt; field. The problem comes when the person writing code which calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plans_for/1&lt;/code&gt; forgets to preload. Since Ecto defaults associations on schema structs to have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%Ecto.Association.NotLoaded{}&lt;/code&gt; value, this approach would lead to a confusing error message like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(KeyError) key :paddle_plan_id not found in:
#Ecto.Association. NotLoaded association :subscription is not loaded&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because the &lt;a href=&quot;https://github.com/plausible/analytics/blob/7d935b79bf516deaa0175ffe1b07784a8c72f3c2/lib/plausible/billing/plans.ex#L139-L146&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains/2&lt;/code&gt;&lt;/a&gt; function accesses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription.paddle_plan_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, it would probably be better to explicitly look to see if the subscription is loaded. We could do this with pattern matching in an additional function definition:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plans_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subscription:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Association&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NotLoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}}),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Expected subscription to be preloaded&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, if we want to avoid referencing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ecto.Association.NotLoaded&lt;/code&gt; module in your application’s code, there’s even a function Ecto provides to allow you to check at runtime:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plans_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;!Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc_loaded?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Expected subscription to be preloaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can get repetitive and potentially error-prone if you have a larger set of associations that you would like your function to depend on. I’ve created a small library called &lt;a href=&quot;https://github.com/cheerfulstoic/require_associations_test&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecto_require_associations&lt;/code&gt;&lt;/a&gt; to take care of the details for you. If you’d like to load multiple associations you can use the same syntax used by Ecto’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preload&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plans_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;EctoRequireAssociations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ensure!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;site_memberships:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above call would check:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscriptions&lt;/code&gt; association has been loaded for the user&lt;/li&gt;
  &lt;li&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site_memberships&lt;/code&gt; association has been loaded for the user&lt;/li&gt;
  &lt;li&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; association has been loaded on each site membership&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If, for example, one or more of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; memberships hasn’t been loaded then an exception is raised like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ArgumentError) Expected association to be set: `site_memberships.site`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can even work on a list of records given to it, just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repo.preload&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;going-too-far-the-other-way&quot;&gt;Going Too Far The Other Way&lt;/h1&gt;

&lt;p&gt;Hopefully I’ve convinced you that the above approach can be helpful for creating more maintainable code. At the same time, I want to caution against another potential problem on the “other side”. Let’s say we have a function to get a user like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:api_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;site_memberships:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_admins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;where:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:api_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;site_memberships:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When loading data to support pure functions, it could be tempting to load everything that might be needed by all functions which have a user argument. The risk then becomes one of loading too much data. Functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_user&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_admins&lt;/code&gt; are likely to be used all over your application, and generally you won’t need all of the associations loaded. This is a scaling problem that isn’t a problem until your application gets popular.One common pattern to solve this is to simply have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preloads&lt;/code&gt; argument:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preloads&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_admins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preloads&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;where:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Usage&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_admins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:api_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This does solve the problem and allows you to load associations only where you need them. I would say, however, that this code falls into the same trap as the Active Record library by intertwining database and application logic.&lt;/p&gt;

&lt;p&gt;The Ecto library, your schemas, and your associations aren’t secrets.  You absolutely should encapsulate things like your complex query logic, the details for how you calculate numbers, or the decisions you make based on data. But it’s fine to ask Ecto to preload the associations and let your query functions just do querying. This can give you a clean separation of concerns:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_admins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;where:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Usage:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_admins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:api_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That said, if you have associations you need for specific functions, you may want to create functions which can preload without the caller knowing the details. This saves repetition and helps clarify overlapping dependencies:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# You can call `preload_for_access_check(user)` to load the required data&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can_access?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EctoRequireAssociations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ensure!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:permissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload_for_access_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:permissions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload_for_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repo.preload&lt;/code&gt; won’t load data if it’s already been set on the struct unless you specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;force: true&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;So if we shouldn’t put our data loading along with our business logic or with our queries, where should it go? The answer to this is fuzzier, but it makes sense to think about what parts of your code should exist as “coordination” points. Let’s talk about some good options:&lt;/p&gt;

&lt;h2 id=&quot;phoenix-controllers-channels-liveviews-and-email-handlers&quot;&gt;Phoenix Controllers, Channels, LiveViews, and Email handlers&lt;/h2&gt;

&lt;p&gt;Controllers, LiveViews, and email handlers are all places where we render a template, and generally we are loading some sort of data to be able to do that. Channels and LiveViews are dealing with events which are also often a place where we’ll need to load data to provide some sort of update to a client. In both cases, this is the place where we know what data will be needed, so it makes sense to keep the responsibility of choosing what data to load in this code.&lt;/p&gt;

&lt;h2 id=&quot;absinthe-resolvers&quot;&gt;Absinthe Resolvers&lt;/h2&gt;

&lt;p&gt;Absinthe is a library for implementing a GraphQL API. Not only will you need to preload data, sometimes you may use the &lt;a href=&quot;https://github.com/absinthe-graphql/dataloader&quot;&gt;Dataloader&lt;/a&gt; to efficiently load data outside of manual preloading. This highlights how loading of associated data is a separate concern from evaluating it.&lt;/p&gt;

&lt;h2 id=&quot;scripts-and-tasks&quot;&gt;Scripts and Tasks&lt;/h2&gt;

&lt;p&gt;Scripts and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix&lt;/code&gt; tasks are another place for coordinating loading and logic. This code might even be one-off and/or short-lived, so it may not even make sense to define functions inside of context modules. Depending on the importance and lifecycle of a script/task it could be that none of the above discussion is applicable.&lt;/p&gt;

&lt;h2 id=&quot;high-level-context-functions&quot;&gt;High Level Context Functions&lt;/h2&gt;

&lt;p&gt;The discussion above suggests pushing loading logic up and out of &lt;a href=&quot;https://hexdocs.pm/phoenix/contexts.html&quot;&gt;context&lt;/a&gt;-type modules. However, if you have a high-level function which is an entrypoint into some complex code, then it may make sense to coordinate your loading and logic there. This is especially true if the function is used from multiple places in your application.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It seems like a small detail, but making more functions purely functional and isolating your database access can have compounding effects on the maintainability of your code. This can be especially true when the codebase is maintained by more than one person, making it easier for everybody to change the code without worrying about side-effects. Try it out and see!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]&lt;/code&gt;: Please don’t see this as me picking on the Plausible Analytics folks in any way. I think that their project is great and the fact that they open-sourced it makes it a great resource for real-world examples like this one!&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><summary type="html">(This post was originally created for the Erlang Solutions blog. The original can be found here)</summary></entry><entry><title type="html">Can’t Live `with` It, Can’t Live `with`out It</title><link href="http://localhost:4000/elixir/2023/02/23/cant-live-with-it-cant-live-without-it" rel="alternate" type="text/html" title="Can’t Live `with` It, Can’t Live `with`out It" /><published>2023-02-23T00:00:00+01:00</published><updated>2023-02-23T00:00:00+01:00</updated><id>http://localhost:4000/elixir/2023/02/23/cant-live-with-it-cant-live-without-it</id><content type="html" xml:base="http://localhost:4000/elixir/2023/02/23/cant-live-with-it-cant-live-without-it">&lt;p&gt;(This post was originally created for the Erlang Solutions blog.  The original can be found &lt;a href=&quot;https://www.erlang-solutions.com/blog/cant-live-with-it-cant-live-without-it&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I’d like to share some thoughts about Elixir’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; keyword.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; is a wonderful tool, but in my experience it is a bit overused.  To use it best, we must understand how it behaves in all cases.  So, let’s briefly cover the basics, starting with pipes in Elixir.&lt;/p&gt;

&lt;h1 id=&quot;pipes-are-a-wonderful-abstraction&quot;&gt;Pipes are a wonderful abstraction&lt;/h1&gt;

&lt;p&gt;But like all tools, you should think about when it is best used…&lt;/p&gt;

&lt;p&gt;Pipes are &lt;strong&gt;at their best&lt;/strong&gt; when you expect your functions to accept and return basic values. But often we don’t have only simple values because we need to deal with &lt;strong&gt;error cases&lt;/strong&gt;. For example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch_*&lt;/code&gt; methods return list values there isn’t a problem. But often we fetch data from an external source, which means we introduce the possibility of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error&lt;/code&gt;. Generally in Elixir this means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, _}&lt;/code&gt; tuples for success and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt; tuples for failure. Using pipes that might become:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;departments&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not horrible, but certainly not beautiful. Fortunately, Elixir has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;!&lt;/p&gt;

&lt;h1 id=&quot;with-is-a-wonderful-abstraction&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; is a wonderful abstraction&lt;/h1&gt;

&lt;p&gt;But like all tools, you should think about when it’s best used…&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; is &lt;strong&gt;at it’s best&lt;/strong&gt; when dealing with the &lt;strong&gt;happy paths&lt;/strong&gt; of a set of calls which &lt;strong&gt;all return similar things&lt;/strong&gt;. What do I mean by that? Let’s look at what this code might look like using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;?&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;departments&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s definitely better!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We separated out the parts of our code which might fail (remember that failure is a sign of a side-effect and in functional programming we want to isolate side-effects).&lt;/li&gt;
  &lt;li&gt;The body is only the things that we don’t expect to fail.&lt;/li&gt;
  &lt;li&gt;We don’t need to explicitly deal with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt; cases (in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; will return any clause values which don’t match the pattern before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;-&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But this is a great example of a &lt;strong&gt;happy path&lt;/strong&gt; where the set of calls &lt;strong&gt;all return similar things&lt;/strong&gt;. But where are some examples of where we might go wrong with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;non-standard-failure&quot;&gt;Non-standard failure&lt;/h2&gt;

&lt;p&gt;What if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.fetch_companies&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt; but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.fetch_departments&lt;/code&gt; returns just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:error&lt;/code&gt;? That means your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; is going to return two different error results. If your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; is the end of your function call then that complexity is now the caller’s responsibility. You might not think that’s a big deal because we can do this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Error fetching departments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this breaks to more-or-less important degrees because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;… once you add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; clause, you need to take care of &lt;em&gt;every&lt;/em&gt; non-happy path case (e.g. above we should match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt; returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.fetch_companies&lt;/code&gt; which we didn’t need to explicitly match before) 😤&lt;/li&gt;
  &lt;li&gt;… if either function is later refactored to return another pattern (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _, _}&lt;/code&gt;) – there will be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WithClauseError&lt;/code&gt; exception (again, because once you add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; the fallback behavior of non-matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;-&lt;/code&gt; patterns doesn’t work) 🤷‍♂️&lt;/li&gt;
  &lt;li&gt;… if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.fetch_departments&lt;/code&gt; is later refactored to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt; – we’ll then have an unused handler 🤷‍♂️&lt;/li&gt;
  &lt;li&gt;… if another clause is added which also returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:error&lt;/code&gt; the message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error fetching departments&lt;/code&gt; probably won’t be the right error 🙈&lt;/li&gt;
  &lt;li&gt;… if you want to refactor this code later, you need to understand &lt;em&gt;everything&lt;/em&gt; that the called functions might potentially return, leading to code which is hard to refactor.  If there are just two clauses and we’re just calling simple functions, that’s not as big of a deal.  But with many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; clauses which call complex functions, it can become a nightmare 🙀&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the first major thing to know when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; is what happens &lt;strong&gt;when a clause doesn’t match it’s pattern&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; &lt;strong&gt;is not&lt;/strong&gt; specified then the non-matching clause is returned.&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; specified then the code for the first matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; pattern is evaluated. If no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; pattern matches , a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WithClauseError&lt;/code&gt; is raised.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As &lt;a href=&quot;http://stratus3d.com/blog/2022/06/01/the-problem-with-elixirs-with/&quot;&gt;Stratus3D&lt;/a&gt; excellently put it: “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; blocks are the only Elixir construct that implicitly uses the same else clauses to handle return values from different expressions. The lack of a one-to-one correspondence between an expression in the head of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; block and the clauses that handle its return values makes it impossible to know when each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; clause will be used”. There are a couple of well known solutions to address this.  One is using “tagged tuples”:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;departments&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fetch_companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fetch_departments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though tagged tuples should be avoided for various reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They make the code a lot more verbose&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; is now being used, so we need to match all patterns that might occur&lt;/li&gt;
  &lt;li&gt;We need to keep the clauses and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; in sync when adding/removing/modifying clauses, leaving room for bugs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Most importantly&lt;/strong&gt;: the value in an abstraction like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, _}&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt; tuples is that you can handle things generically without needing to worry about the source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A generally better solution is to create functions which normalize the values matched in the patterns.  This is covered well in &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#with/1-beware&quot;&gt;a note in the docs for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;&lt;/a&gt; and I recommend checking it out.  One addition I would make: in the above case you could leave the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.fetch_companies&lt;/code&gt; alone and just surround the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.fetch_departments&lt;/code&gt; with a local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch_departments&lt;/code&gt; to turn the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:error&lt;/code&gt; into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, reason}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;non-standard-success&quot;&gt;Non-standard &lt;em&gt;success&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;We can even get unexpected results when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; succeeds! To start let’s look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse/1&lt;/code&gt; function from the excellent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decimal&lt;/code&gt; library. It’s typespec tells us that it can return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{Decimal.t(), binary()}&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:error&lt;/code&gt;. If we want to match a decimal value without extra characters, we could have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; clause like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; is given as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;1.23 &quot;&lt;/code&gt; (with a space at the end), then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decimal.parse/1&lt;/code&gt; will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{#Decimal&amp;lt;1.23&amp;gt;, &quot; &quot;}&lt;/code&gt;. Since that doesn’t match our pattern (string with a space vs. an empty string), the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; will be skipped. If we don’t have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; then instead of returning a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, _}&lt;/code&gt; value, we return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{#Decimal&amp;lt;1.23&amp;gt;, &quot; &quot;}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The solution may seem simple: match on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{decimal, _}&lt;/code&gt;! But then we match strings like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;1.23a&quot;&lt;/code&gt; which is what we were trying to avoid. Again, we’re likely better off defining a local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_decimal&lt;/code&gt; function which returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, _}&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, _}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are other, similar, situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, %{&quot;key&quot; =&amp;gt; value}} &amp;lt;- fetch_data(...)&lt;/code&gt; – the value inside of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, _}&lt;/code&gt; tuple may not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;key&quot;&lt;/code&gt; key.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[%{id: value}] &amp;lt;- fetch_data(...)&lt;/code&gt; – the list returned may have more or less than one item, or if it does only have one item it may not have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:id&lt;/code&gt; key&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value when length(value) &amp;gt; 2 &amp;lt;- fetch_data(...)&lt;/code&gt; – the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; might not match. There are two cases where this might surprise you:
    &lt;ul&gt;
      &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; is a list, the length of the list being 2 or below will return the list.&lt;/li&gt;
      &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; is a string, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; isn’t a valid function (you’d probably want &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte_size&lt;/code&gt;). Instead of an exception, the guard simply fails and the pattern doesn’t match.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem in all of these cases is that the intermediate value from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch_data&lt;/code&gt; will be returned, not what the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; would return. This means that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; returns “uneven” results. We can handle these cases in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt;, but again, once we introduce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; we need to take care of all potential cases.&lt;/p&gt;

&lt;p&gt;I might even go to the extent of recommending that you don’t define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; clause patterns which are at all deep in their pattern matching unless you are very sure the &lt;strong&gt;success case&lt;/strong&gt; will be able to match the &lt;strong&gt;whole pattern&lt;/strong&gt;.  One example where you might take a risk is when matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%MyStruct{key: value} &amp;lt;- …&lt;/code&gt; where you &lt;strong&gt;know&lt;/strong&gt; that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyStruct&lt;/code&gt; value is going to be returned and you know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; is one of the keys defined for the struct. No matter the case, dialyzer is one tool to gain confidence that you will be able to match on the pattern (at least for your own code or libraries which also use dialyzer).&lt;/p&gt;

&lt;p&gt;One of the simplest and most standard ways to avoid these issues is to make sure the functions that you are calling return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:ok, variable}&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:error, reason}&lt;/code&gt; tuples. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; can fall through cleanly (&lt;em&gt;definitely&lt;/em&gt; check out Chris Keathley’s discussion of “Avoid else in with blocks” in his post &lt;a href=&quot;https://keathley.io/blog/good-and-bad-elixir.html&quot;&gt;“Good and Bad Elixir”&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;With all that said, I recommend using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; statements whenever you can! Just make sure that you think about fallback cases that might happen. Even better: write tests to cover all of your potential cases! If you can strike a balance and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; carefully, your code can be both cleaner &lt;strong&gt;and&lt;/strong&gt; more reliable.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><summary type="html">(This post was originally created for the Erlang Solutions blog. The original can be found here)</summary></entry><entry><title type="html">How Far Can I Push a GenServer?</title><link href="http://localhost:4000/elixir/2021/07/23/How-Far-Can-I-Push-a-GenServer" rel="alternate" type="text/html" title="How Far Can I Push a GenServer?" /><published>2021-07-23T00:00:00+02:00</published><updated>2021-07-23T00:00:00+02:00</updated><id>http://localhost:4000/elixir/2021/07/23/How-Far-Can-I-Push-a-GenServer</id><content type="html" xml:base="http://localhost:4000/elixir/2021/07/23/How-Far-Can-I-Push-a-GenServer">&lt;p&gt;I’ve been using Elixir for a while and I’ve implemented a number of GenServers.  But while I think I mostly understand the purpose of them, I’ve not gotten the chance to push one it’s limits, scale it up, and find ways to address it’s bottlenecks.  I thought that it would be fun to create something to which I could give the URL as part of a presentation and have some confidence that it would be able to handle all the users who connected to it.  So recently I implemented a simple game grid using Phoenix LiveView and emojis as indicators of player and objects.  If you would like to learn about my journey, read on!  But note that you’ll probably want to have at least a basic understanding of GenServers first.  You might start by &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/genserver.html&quot;&gt;reading this&lt;/a&gt; and/or &lt;a href=&quot;https://elixircasts.io/intro-to-genserver&quot;&gt;watching this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to look at the source code for this project you can see it &lt;a href=&quot;https://github.com/cheerfulstoic/emoji_game&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TL;DR: This post isn’t very TL;DR-able 😁  I don’t have any conclusions or recommendations to share, just a journey.  I invite you to join me to learn what I’ve learned!&lt;/p&gt;

&lt;h1 id=&quot;overview-of-the-project&quot;&gt;Overview of the Project&lt;/h1&gt;

&lt;p&gt;
  &lt;div&gt;
    &lt;a href=&quot;/assets/images/how-far-can-i-push-a-genserver/game-grid.png&quot;&gt;
      &lt;img src=&quot;/assets/images/how-far-can-i-push-a-genserver/game-grid.png&quot; style=&quot;max-width: 500px&quot; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;&lt;em&gt;The Game Grid&lt;/em&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It is an Elixir Phoenix app which starts up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenServer&lt;/code&gt; process as the game server which:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keeps track of a 1000x1000 square game grid, populated with random objects (trees, to start)&lt;/li&gt;
  &lt;li&gt;Allows clients (other Elixir processes, players + actors) to make moves&lt;/li&gt;
  &lt;li&gt;Keeps track of the current position of clients, indexed by their process ID (PID)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There will then also be two kinds of “client”s of the game server:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A LiveView UI which handle the player’s session and key presses&lt;/li&gt;
  &lt;li&gt;A set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenServer&lt;/code&gt;s (the “actors”) which will move randomly every second.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-move-message&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; Message&lt;/h1&gt;

&lt;p&gt;To implement moves I started out with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message. Clients can send this message to the game server with their new position.  An LiveView process sends this once at startup to establish a starting position and then again each time the player presses an arrow key.  An actor processes simply sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message once every second to move randomly.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message itself worked fine, but a player wouldn’t see any movement from actor processes until they (the player) moved.  I dealt with this problem later, so see the “Sending Map Updates Asyncronously” section below for my solution.&lt;/p&gt;

&lt;h1 id=&quot;linking-clients&quot;&gt;Linking Clients&lt;/h1&gt;

&lt;p&gt;One thing that I discovered early on was that the game would sometimes crash and the player would end up with a extra “dead” copy of themself on the board.  It turns out that this would happen whenever the player pressed any non-arrow key (including modifier keys like alt/option).  This is because I was handling key presses with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; statement without accounting for anything other than the four arrow keys.  When another key was pressed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CaseClauseError&lt;/code&gt; error would be raised and crash the LiveView process.  LiveView handled this great by automagically creating a new process for the session, but my game server would still think that the old process was around and thus the old avatar was still there.  My fix: the game server calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.link&lt;/code&gt; to link itself to each client and then traps exits to clean up the information it has about that client’s PID.&lt;/p&gt;

&lt;details class=&quot;nitty-gritty&quot;&gt;
  &lt;summary&gt;Nitty-gritty detail&lt;/summary&gt;

  
&lt;p&gt;I initially called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.link&lt;/code&gt; whenever a client sent a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message.  The documentation says “If such a link exists already, this function does nothing”, so it wasn’t a problem.  But the more elegant way would be to just do it once.&lt;/p&gt;

&lt;p&gt;Also: I started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_cast&lt;/code&gt;, but it doesn’t give you a PID.  So I couldn’t just have clients send a move without getting a response because the game server needs to track clients by their PID.  So I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_call&lt;/code&gt;, but that will probably be needed in the long run anyway since clients will eventually need feedback to know if their moves are invalid (i.e. something is there which can’t occupy the same space at the same time)&lt;/p&gt;

&lt;/details&gt;

&lt;h1 id=&quot;registering&quot;&gt;Registering&lt;/h1&gt;

&lt;p&gt;I was beginning to have various reasons for thinking I should create a new kind of message that clients send to the game server to register themselves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.link&lt;/code&gt; could be called only once once&lt;/li&gt;
  &lt;li&gt;It would simplify the code to handle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; messages (no need to check if the PID already exsits)&lt;/li&gt;
  &lt;li&gt;It would allow for the game server to send the map section right away&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will also later turn out to be a useful opportunity for the client to send configuration options to the server (keep reading for more!)&lt;/p&gt;

&lt;h1 id=&quot;measuring&quot;&gt;Measuring&lt;/h1&gt;

&lt;p&gt;With that done I wanted to optimize the process so that I could handle more clients.  But, before optimizing my code, I wanted to add some metrics tracking because you can’t optimize what you can’t see!  Thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telemetry&lt;/code&gt; being included with Phoenix I was able to quickly add metrics for the game server’s queue size and the response time of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message (as seen from the actors).  From there on I was able to see those metrics in the Phoneix LiveDashboard.  Since LiveDashboard only shows recent values, I also used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telemetry_metrics_statsd&lt;/code&gt; library to send the metrics to a local statsd server with graphite for visualization (using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graphiteapp/graphite-statsd&lt;/code&gt; docker image).&lt;/p&gt;

&lt;details class=&quot;tabbed-git-gist&quot;&gt;
  &lt;summary&gt;See the code&lt;/summary&gt;

  &lt;div x-data=&quot;{data : {files: []}, current_tab: 'benchmark.exs'}&quot; x-init=&quot;data = await (await fetch('https://api.github.com/gists/9498a7f262ffc5a12b5ec87be8db2590')).json(); current_tab = Object.keys(data.files)[0]&quot;&gt;
    &lt;nav&gt;
      &lt;template x-for=&quot;filename in Object.keys(data.files)&quot; x-bind:key=&quot;filename&quot;&gt;
        &lt;div class=&quot;tab&quot; x-bind:class=&quot;{ 'active': current_tab === filename }&quot; x-on:click.prevent=&quot;current_tab = filename; window.location.hash = filename&quot; x-text=&quot;filename&quot; href=&quot;#&quot;&gt;&lt;/div&gt;
      &lt;/template&gt;
    &lt;/nav&gt;

    &lt;div class=&quot;tabs-body&quot;&gt;
      &lt;template x-for=&quot;filename in Object.keys(data.files)&quot; x-bind:key=&quot;filename&quot;&gt;
        &lt;iframe x-show=&quot;current_tab === filename&quot; x-bind:srcdoc=&quot;`&amp;lt;script src='https://gist.github.com/9498a7f262ffc5a12b5ec87be8db2590.js?file=${filename}'&amp;gt;&amp;lt;/script&amp;gt;`&quot;&gt;
        &lt;/iframe&gt;
      &lt;/template&gt;
    &lt;/div&gt;

  &lt;/div&gt;

  &lt;style&gt;
    iframe {
      border: 0;
      width: 100%;
      height: 307px;
    }

    .tab {
      display: inline-block;
      border: 1px solid black;
      border-bottom: 0;
      background-color: white;
      padding: 0.4em;
    }
    .tab.active {
      position: relative;
      top: 1px;
      background-color: #ddd;
    }
    .tabs-body {
      background-color: #ddd;
      border: 1px solid black;
    }
  &lt;/style&gt;
&lt;/details&gt;

&lt;p&gt;
  &lt;div&gt;
    &lt;a href=&quot;/assets/images/how-far-can-i-push-a-genserver/livedashboard.png&quot;&gt;
      &lt;img src=&quot;/assets/images/how-far-can-i-push-a-genserver/livedashboard.png&quot; style=&quot;max-width: 100%&quot; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;&lt;em&gt;LiveDashboard&lt;/em&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;div&gt;
    &lt;a href=&quot;/assets/images/how-far-can-i-push-a-genserver/graphite.png&quot;&gt;
      &lt;img src=&quot;/assets/images/how-far-can-i-push-a-genserver/graphite.png&quot; style=&quot;max-width: 100%&quot; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;&lt;em&gt;Graphite (via statsd)&lt;/em&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I started out with 20 actors.  This worked fine, and I was seeing response times between 5 and 65ms.  I then raised the count by 20 each time.  Getting up to 60 went fine overall with occasional increases in queue size / response time.  But, when I got up to 80, it took some time before after startup before the queue went down to zero.  Going up a bit to 90 led to the queue rarely going down to zero and response times of between 250 and 450ms, which I considered to be around the breaking point.&lt;/p&gt;

&lt;h1 id=&quot;reducing-the-move-message-response-size&quot;&gt;Reducing The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; Message Response Size&lt;/h1&gt;

&lt;p&gt;My first idea for allowing me to handle more simultaneous clients was to change my default map response from being a List-of-Lists to a Map.&lt;/p&gt;

&lt;details class=&quot;show-the-code&quot;&gt;
  &lt;summary&gt;Show me the code!&lt;/summary&gt;

  
&lt;p&gt;What this means is that, instead of the server returning this to clients:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would return this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tree&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While that isn’t much sparser in those examples, my hope was that with a larger map section with trees and actors spread out that this would be less to send.&lt;/p&gt;

&lt;/details&gt;

&lt;p&gt;Unfortunately, it didn’t seem to actually help much.  Thinking about this later, I realized one reason could be that I was starting all of the actors in the same place on the map, meaning that the “sparse” format wasn’t making much of a difference in the case that I was testing.&lt;/p&gt;

&lt;p&gt;While this didn’t help, I still kept the change as I felt that it was a better solution and because I didn’t have any reason to think it would perform worse 😊&lt;/p&gt;

&lt;h1 id=&quot;sending-map-updates-asyncronously&quot;&gt;Sending Map Updates Asyncronously&lt;/h1&gt;

&lt;p&gt;The next thing that I tried was simply returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; when handling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; messages but sending a map update to clients asyncronously.  While this didn’t help with scaling, I was able to fix the above problem where players only see updates when they move.   I also felt that it was a good way to setup the messages as it is the same way that LiveView works (incoming messages update the state and LiveView sends outgoing websocket messages to all clients whenever there is a need for them to know about state changes).&lt;/p&gt;

&lt;h1 id=&quot;reducing-the-map-section-size-returned&quot;&gt;Reducing the Map Section Size Returned&lt;/h1&gt;

&lt;p&gt;My next experiment was to reduce the size of the map section which is returned to clients.  Originally I returned a 27x27 section of the map which I reduced to a 17x17 section.  This means that the number of potential squares returned is 289 instead of 729.  This helped me have up to 130 actors at once, which was definitely a good jump!  This was an easy change to make because I didn’t have a specific purpose for the game yet, but if this is an actual game that I wanted to release I would want to think as the “game designer” what map size is important.  Overall, though, this would be much less important given the next thing that I tried…&lt;/p&gt;

&lt;h1 id=&quot;allow-clients-to-ask-for-map-updates&quot;&gt;Allow Clients to Ask For Map Updates&lt;/h1&gt;

&lt;p&gt;If we have, for example, 100 clients which are moving once every second and each client gets an update whenever another client moves, the game server will need to send around 10,000 messages every second!  While the LiveView clients which connect to the game need to these map updates from the game server, the actor clients which are just moving randomly didn’t use that information. This means that we can avoid sending many of these messages!  So my next idea: allow a client to specify if they want updates (or not) when they register.&lt;/p&gt;

&lt;p&gt;Since there was already a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; message that clients send on startup, I was easily able to add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt; argument which can have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_view_update&lt;/code&gt; key.  By having actors specify that they didn’t want updates I was able to spin up 1,000 actors.  Big progress!&lt;/p&gt;

&lt;h1 id=&quot;scale-back-the-rate-of-updates&quot;&gt;Scale back the rate of updates&lt;/h1&gt;

&lt;p&gt;Increasing the number of actors by 770% is great, but even though our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveView&lt;/code&gt; process is the only one receiving updates it is still getting 1,000 updates every second!  A human eye only sees updates on the order of 60 frames per second.  Fortunately it’s easy to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.send_after&lt;/code&gt; to have our game server send itself a message on a regular basis.  Using this, I started with having the game server update clients around once every 200ms. This meant five frames per second.&lt;/p&gt;

&lt;p&gt;This was a bit sluggish, but I realized that the most important thing is for a player to see their &lt;em&gt;own&lt;/em&gt; updates quickly.  If there is a 200-300ms delay between an actor moving and the player seeing it then probably players won’t notice.  So, I simply send a message back to just the client every time they move (if they’ve set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_view_update&lt;/code&gt;).  This means that they get an update as fast as possible without worrying about updating other clients immediately.&lt;/p&gt;

&lt;p&gt;Overall this worked quite well, allowing me to have around 6000 actors at once!  Since making updates to players now happens asyncronously this change was super easy!&lt;/p&gt;

&lt;h1 id=&quot;scaling-too-high&quot;&gt;Scaling Too High&lt;/h1&gt;

&lt;p&gt;I wrote above that I had scaled to around 6000 actors, but for a little while I was scaling up and up and up until I got to around 50,000 actors thinking that I had stumbled onto something amazing!  It was then that my skepticism kicked in, and I realized I was just changing the number of trees generated on the board. When I thought I was able to handle 50,000 clients, it was really 50,000 trees.  So, while not as useful, I guess at least I know I can have at least 50,000 trees in my fake game.&lt;/p&gt;

&lt;p&gt;(Also, to be completely open: I end up making the above mistake one more time later on. 🤦‍♂️)&lt;/p&gt;

&lt;h1 id=&quot;time-out&quot;&gt;Time Out!&lt;/h1&gt;

&lt;p&gt;It was about this point that I was starting to see timeouts from the actors during startup.  There are a couple of twists here, so I’ll try to lead you carefully along this path:&lt;/p&gt;

&lt;p&gt;Since early in the development of the game server the actors have been started up in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt;.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt; callback exists to continue the work of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; callback, both of which are for running code when the process first starts up.  During &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;, though, messages can’t arrive in the processes’ mailbox while they can during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt;.  Since starting up actors isn’t critical to getting a game server running, I put the login inside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;My worry was that the actor startup was taking too long.  The default timeout for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenServer&lt;/code&gt; messages is 5000ms, so even if the mailbox can receive messages during the running of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt;, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt; takes too long some messages may time out while waiting.  If the message times out, then the actor crashes.  Perhaps starting up more and more actors was keeping the game server from getting down to it’s job quickly enough?&lt;/p&gt;

&lt;p&gt;What’s one thing to try in Elixir when you’ve got a problem?  Create another process! &lt;a href=&quot;##&quot; title=&quot;just kidding... mostly&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;  I thought to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; (specifically &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor.async_nolink&lt;/code&gt;) to startup a temporary process which just has the job of starting up all of the actors.&lt;/p&gt;

&lt;p&gt;That was maybe a good idea, in a way, but it didn’t actually help with the timeouts!  After some tracing and debugging I found that it actually started up the actors quite quickly!  It seemed that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; messages were just coming at the server so quickly at first that it struggled to keep up.  After a certain number of clients, it couldn’t respond to messages within the 5000ms timeout.&lt;/p&gt;

&lt;p&gt;So, ok, the timeout is just a default, so increase the timeout, right?  That certainly works!  But:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Since it’s the default, I didn’t want to change it without a good reason&lt;/li&gt;
  &lt;li&gt;If I change the timeout, I couldn’t compare my previous results to my future results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, with increasing timeouts as a tool in my pocket, I moved on!&lt;/p&gt;

&lt;h1 id=&quot;trying-mapupdate&quot;&gt;Trying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map.update!&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Another small improvement I tried: Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map.update&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map.update!&lt;/code&gt;.  My thought was that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map.update&lt;/code&gt; was probably doing some sort of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; check for the key.  Perhaps without that and depending on an exception be raised/caught would improve things?  That turned out to be very &lt;em&gt;not&lt;/em&gt; true, and with the help of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;benchee&lt;/code&gt; library I was able to see how they compared in cases where the key in question existed or not.&lt;/p&gt;

&lt;p&gt;You can see the results of that benchmark in the snippets below.  But, regardless of which version, I tried it didn’t make a difference to how many actors I could create.  It was great to learn something about Elixir, but this was not a bottleneck.&lt;/p&gt;

&lt;details class=&quot;tabbed-git-gist&quot;&gt;
  &lt;summary&gt;See the code&lt;/summary&gt;

  &lt;div x-data=&quot;{data : {files: []}, current_tab: 'benchmark.exs'}&quot; x-init=&quot;data = await (await fetch('https://api.github.com/gists/e00bb6f451f4eed32e96fd481880a920')).json(); current_tab = Object.keys(data.files)[0]&quot;&gt;
    &lt;nav&gt;
      &lt;template x-for=&quot;filename in Object.keys(data.files)&quot; x-bind:key=&quot;filename&quot;&gt;
        &lt;div class=&quot;tab&quot; x-bind:class=&quot;{ 'active': current_tab === filename }&quot; x-on:click.prevent=&quot;current_tab = filename; window.location.hash = filename&quot; x-text=&quot;filename&quot; href=&quot;#&quot;&gt;&lt;/div&gt;
      &lt;/template&gt;
    &lt;/nav&gt;

    &lt;div class=&quot;tabs-body&quot;&gt;
      &lt;template x-for=&quot;filename in Object.keys(data.files)&quot; x-bind:key=&quot;filename&quot;&gt;
        &lt;iframe x-show=&quot;current_tab === filename&quot; x-bind:srcdoc=&quot;`&amp;lt;script src='https://gist.github.com/e00bb6f451f4eed32e96fd481880a920.js?file=${filename}'&amp;gt;&amp;lt;/script&amp;gt;`&quot;&gt;
        &lt;/iframe&gt;
      &lt;/template&gt;
    &lt;/div&gt;

  &lt;/div&gt;

  &lt;style&gt;
    iframe {
      border: 0;
      width: 100%;
      height: 307px;
    }

    .tab {
      display: inline-block;
      border: 1px solid black;
      border-bottom: 0;
      background-color: white;
      padding: 0.4em;
    }
    .tab.active {
      position: relative;
      top: 1px;
      background-color: #ddd;
    }
    .tabs-body {
      background-color: #ddd;
      border: 1px solid black;
    }
  &lt;/style&gt;
&lt;/details&gt;

&lt;h1 id=&quot;move_and_update-a-very-specific-solution&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move_and_update&lt;/code&gt;: A Very Specific Solution&lt;/h1&gt;

&lt;p&gt;I thought perhaps that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; check for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_view_update&lt;/code&gt; could be a place to improve.  Perhaps instead of registering to request updates during registration, clients could send a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move_and_update&lt;/code&gt; message instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; when they want an update afterward.  It did seem to help a bit (allowing me to go from around 8,000 actors to around 9,000), but I didn’t really like the solution, so I decided the improvement wasn’t worth it.  I like the simplicity of just having the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message overall.  If using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move_and_update&lt;/code&gt; made a big difference or if it helped me to meet the requirements of the application I’m building I would revisit this.&lt;/p&gt;

&lt;h1 id=&quot;having-actors-wait-on-startup&quot;&gt;Having Actors Wait on Startup&lt;/h1&gt;

&lt;p&gt;I thought about how I could independently control:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how long actors wait before sending their first message (via process startup)&lt;/li&gt;
  &lt;li&gt;how long an actor waits between moves (via the repeating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_info&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I was still getting timesouts, I decided to try waiting 3000ms at startup while leaving the time between moves as 1000ms.  It helped a bit: again allowing me to go from around 8,000 actors to around 9,000.  Since I’m OK with the actors taking a bit more time to move, I left this one in.&lt;/p&gt;

&lt;h1 id=&quot;a-discovery&quot;&gt;A Discovery!&lt;/h1&gt;

&lt;p&gt;Then I came to a big discovery.  During client registration the server was still sending back the map section as a response, even if the player hadn’t asked for updates!  Since registration happens just once, while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; message happens a lot, this might not seem like a big deal.  However, when the game tried to start up many, many actors, it is just the sort of thing that could cause it get behind in processing it’s queue and…. create timeouts!&lt;/p&gt;

&lt;p&gt;So I simply had the response from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.  Then I could just call the same function that I already had to queue up a map update message for the client (if they’ve set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_view_update&lt;/code&gt;).  With that change, I was then able to start up around 13,000 actors, making for a 44% increase!&lt;/p&gt;

&lt;h1 id=&quot;a-step-backward&quot;&gt;A Step Backward&lt;/h1&gt;

&lt;p&gt;I was pretty sure that this wouldn’t make things better, but it turned out to make things much worse:&lt;/p&gt;

&lt;p&gt;I tried putting the logic of sending map updates during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt;.  This is for code which executes after a message is handled, just like after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;.  This didn’t allow me to scale any more, but it also had the effect that responsiveness to player moves were slower, especially when the game server had high queue lengths.&lt;/p&gt;

&lt;p&gt;Maybe using “continue” meant the server sending a message to itself and that the message goes to back of the queue?  That would mean that the map update message had to wait to be sent instead of being sent right away.  I’m not 100% sure about this though.  When “continue” is used during init of a GenServer it is guarunteed to be processed before other messages, but when it’s used in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_call&lt;/code&gt; where other messages have already been queued up that may not be the same&lt;/p&gt;

&lt;p&gt;Anyway, I removed that change :)&lt;/p&gt;

&lt;h1 id=&quot;sleep-to-scale&quot;&gt;Sleep to Scale&lt;/h1&gt;

&lt;p&gt;Even with the reduction in work when handling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; messages, I would still, at some point, get timeouts.  I thought perhaps that if I put a delay (say 10ms) between startup of each of my actors I could avoid that or at least push it back further.  This stretches out the time it would take to start up all of the actors to at least a couple of minutes.  If I were still doing the work directly in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_continue&lt;/code&gt; this would be a problem as the game server wouldn’t be able to respond to messages during that time.  Fortunately I was still using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor.async_nolink&lt;/code&gt; so the the game server gets down to handling messages just as soon as it’s handed off the task of starting up actors to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Overall it helped some!  I was able to startup around 15,000 actors and the server was pretty stable and responsive (though at that point the queue generally wasn’t getting worked down and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt; response time can be between 1000 and 2000ms).  But as an unexpected benefit: by starting up the actors slowly I was able to more easily see the point at which the metrics show things becoming unstable.&lt;/p&gt;

&lt;h1 id=&quot;other-notes--learnings&quot;&gt;Other Notes / Learnings&lt;/h1&gt;

&lt;h2 id=&quot;visualizing-possibilites&quot;&gt;Visualizing Possibilites&lt;/h2&gt;

&lt;p&gt;I found it fascinating to watch the actors spread out from a single point.  Since the actors move randomly one space at a time, the most likely thing for them to do would be to stay in one spot.  If I spawned 1,000 actors then I could see some making it out of the central mass, giving a viseral sense of how far actors could go in the rare cases.  It’s was a sort-of live 2D histogram of potential end positions after X number of moves.&lt;/p&gt;

&lt;h2 id=&quot;livedashboard&quot;&gt;LiveDashboard&lt;/h2&gt;

&lt;p&gt;LiveDashboard and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telemetry&lt;/code&gt; were amazing for getting up-and-running very quickly, but it was sometimes frustrating to only see the recent values.  Also, sometimes when I would refresh the metrics would change dramatically, giving me the feeling that something wasn’t updating correctly.  Sending the metrics to statsd/graphite was slower and had less resolution, but felt more reliable.  I’m super glad that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telemetry&lt;/code&gt; allows for both options (and more) to exist!&lt;/p&gt;

&lt;h1 id=&quot;other-potential-improvements&quot;&gt;Other Potential Improvements&lt;/h1&gt;

&lt;p&gt;At this point I had made a lot of progress and learned a lot of things.  If I would actually want to use this for a real project, there are some other things that I could investigate improving:&lt;/p&gt;

&lt;h2 id=&quot;using-an-ets-table&quot;&gt;Using an ETS Table&lt;/h2&gt;

&lt;p&gt;If I used an ETS table that only the game server writes to, it could allow client processes to retrieve a map state by querying the table.  This could reduce the load of the game server and maybe allowing for better scaling.&lt;/p&gt;

&lt;h2 id=&quot;reducing-actor-movements&quot;&gt;Reducing Actor Movements&lt;/h2&gt;

&lt;p&gt;If the actors moved less often then the game server would have fewer messages / second, allowing it to support more clients at once.  Having actors wait a random amount of time between movements could preserve a feeling of realism for the player.&lt;/p&gt;

&lt;h1 id=&quot;potential-challenges-for-building-a-game&quot;&gt;Potential Challenges for Building a Game&lt;/h1&gt;

&lt;p&gt;I also have some ideas for what I might do to actually turn this into a real game (at least something which people might want to play for a bit as a demo)&lt;/p&gt;

&lt;h2 id=&quot;testing-real-player-load&quot;&gt;Testing Real Player Load&lt;/h2&gt;

&lt;p&gt;I’ve pushed the limit for how many actors which can be run at once, but they don’t need the map updates.  Adding (or simulating) many real players would be different and might require a strategy like having an ETS table.&lt;/p&gt;

&lt;h2 id=&quot;enforcing-game-rules&quot;&gt;Enforcing Game Rules&lt;/h2&gt;

&lt;p&gt;There will probably be a need to implement some game rules.  For a start I might implement a rule like “players/actors cannot be in the same spot as a tree”.&lt;/p&gt;

&lt;h2 id=&quot;other-kinds-of-actors&quot;&gt;Other Kinds of Actors&lt;/h2&gt;

&lt;p&gt;While having just one kind of actor made benchmarking straightforward, it would be great to make the world more interesting by adding other kinds of actors.  One example I can imagine would be bacteria emoji which grow and die with rules similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><summary type="html">I’ve been using Elixir for a while and I’ve implemented a number of GenServers. But while I think I mostly understand the purpose of them, I’ve not gotten the chance to push one it’s limits, scale it up, and find ways to address it’s bottlenecks. I thought that it would be fun to create something to which I could give the URL as part of a presentation and have some confidence that it would be able to handle all the users who connected to it. So recently I implemented a simple game grid using Phoenix LiveView and emojis as indicators of player and objects. If you would like to learn about my journey, read on! But note that you’ll probably want to have at least a basic understanding of GenServers first. You might start by reading this and/or watching this.</summary></entry><entry><title type="html">Why I Love Lodash</title><link href="http://localhost:4000/javascript/2021/05/13/why-I-love-lodash" rel="alternate" type="text/html" title="Why I Love Lodash" /><published>2021-05-13T22:26:00+02:00</published><updated>2021-05-13T22:26:00+02:00</updated><id>http://localhost:4000/javascript/2021/05/13/why-I-love-lodash</id><content type="html" xml:base="http://localhost:4000/javascript/2021/05/13/why-I-love-lodash">&lt;p&gt;I love &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt;, but I’m not here to tell you to use Lodash.  It’s up to you to decide if a tool is useful for you or your project.  It will come down to the needs of the project (file size, browser/Node.js, how much you use it, etc…).  But my new team was surprised by my passion for it and so I wanted to share my thoughts.  Specifically: I want to focus in this post on those things which I like, including things which I think people often miss.&lt;/p&gt;

&lt;h2 id=&quot;checking-types&quot;&gt;Checking types&lt;/h2&gt;

&lt;p&gt;To start with something simple, let’s look at identifying variable types.  I’ll take the examples from &lt;a href=&quot;https://dev.to/jmitchell38488/it-s-time-to-let-go-of-lodash-221f&quot;&gt;this post&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of that works, technically, but it’s so inconsistent.  This is especially true of the third example checking if something is an object.  Such a check requires a deeper understanding of Javascript objects that not everybody has and it might not always be implemented correctly.&lt;/p&gt;

&lt;p&gt;Also, regarding the last example for checking boolean, I should admit that I lied a bit: it isn’t from the post I linked to!  The example they gave was: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean(foo)&lt;/code&gt;, but in the comments somebody pointed out that truthy values like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean(1)&lt;/code&gt; would return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.  For me, all of this is more complex and error prone than just doing:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isBoolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With those, I’m a lot less likely to come back to my code later because of a bug due to my understanding of type checking.&lt;/p&gt;

&lt;h2 id=&quot;chaining&quot;&gt;Chaining&lt;/h2&gt;

&lt;p&gt;I very often have a need to transform a data structure in multiple steps:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Find adults, group by age (ten-year spans), and find if any in each group own a pet&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Jane Doe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groupedAdults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupingNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExistsForGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupedAdults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;groupedAdults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;petExistsForGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seem about what you expect from Javascript?  Maybe not the nicest bit of code in the world, but it does the job.  Good enough, right?  Let’s try using Lodash chaining, along with other helpers:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Jane Doe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;petExistsForGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;groupBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ownsPet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s another way of thinking, right?  Shorter for sure, but also higher-level and more declarative.  The mechanics drop away and we’re left with our code business logic.&lt;/p&gt;

&lt;p&gt;This is one of the big things that I love about Lodash.  If you take the time to learn it, it allows you to work at a higher level, not worrying about small details.  For that reason I enjoy just browsing through the documentation sometimes, like browsing an IKEA catalog and thinking to myself “oooh, that could be nice…”.  It’s good to know what’s there, even if you’re not sure why you would use it.  I’ve found &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.partition&lt;/code&gt; surprisingly useful!&lt;/p&gt;

&lt;p&gt;Did I choose an example that plays to Lodash’s strengths?  Absolutely!  But I challenge anybody to make the first example shorter while still being readable using pure Javascript.&lt;/p&gt;

&lt;p&gt;It’s also worth mentioning that Lodash has methods which basically just duplicate the functionality of their javascript counterparts (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.concat&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.fill&lt;/code&gt;).  This maybe seems unnecessary to people who are skeptical of Lodash, but remember that because Lodash offers chaining it needs to provide all of the potential methods that you might use.&lt;/p&gt;

&lt;h2 id=&quot;iteratee-shorthand&quot;&gt;Iteratee shorthand&lt;/h2&gt;

&lt;p&gt;You may have noted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.some(adults, 'ownsPet')&lt;/code&gt; bit above.  By passing in a string instead of a function, Lodash automatically uses an identity function.  This would be the equivilent of: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.some(adults, (adult) =&amp;gt; adult.ownPet)&lt;/code&gt;.  True the second version isn’t much longer, but the first is more at-a-glance readable.&lt;/p&gt;

&lt;p&gt;But it doesn’t stop there!  You can use the string syntax for nested paths:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contactDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;123-456-7890&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;me@thingowner.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;owner.contactDetails.phoneNumber&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;owner.contactDetails.email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;me@thingowner.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ... more?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only does it provide a simple syntax for going deep, but if any step along the way doesn’t exist (say, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contactDetails&lt;/code&gt; field is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;), it will simply return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, similar to Javascript’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?.&lt;/code&gt; operator.&lt;/p&gt;

&lt;h2 id=&quot;javascript-as-the-write-it-yourself-language&quot;&gt;Javascript as the “write it yourself” language&lt;/h2&gt;

&lt;p&gt;Having been a Ruby programmer for a long time, I will often search for a way to manipulate some data in Ruby and very often there will by either a simple function to call or a discussion on how to write something concise but readable.  Whenever I’m working with Javascript, however, the answer very often seems to be either “write it yourself” or “copy a solution”.  Here is a small selection that I gathered relatively quickly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/45342155/how-to-subtract-one-array-from-another-element-wise-in-javascript&quot;&gt;How to subtract one array from another, element-wise, in javascript&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.difference&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4550505/getting-a-random-value-from-a-javascript-array&quot;&gt;Getting a random value from a JavaScript array&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values&quot;&gt;Sorting an array of objects by property values&lt;/a&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sortBy&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22015684/how-do-i-zip-two-arrays-in-javascript&quot;&gt;How do I zip two arrays in JavaScript?&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.zip&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes you’ll even get answers, like with &lt;a href=&quot;https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array&quot;&gt;How to randomize (shuffle) a JavaScript array?&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.shuffle&lt;/code&gt;) which talks about the ideal algorithm (the “Fisher-Yates (aka Knuth) Shuffle” in this case).  Academically I enjoy learning about different algorithms, but when I’m trying to get higher-level done I just want something that works well.  I’m not sure if the performance of my sorting / shuffling algorithm has ever been a practical concern.&lt;/p&gt;

&lt;p&gt;Some of these solutions are very complex, but some are pretty simple, even if they aren’t as simple as just calling a Lodash function.  So what’s so bad about using pure Javascript to zip two arrays?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem, as I see it, is that it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is not immediately obvious&lt;/li&gt;
  &lt;li&gt;is a distraction from the task that you’re trying to accomplish&lt;/li&gt;
  &lt;li&gt;leaves room for custom functions to be implemented in broken, odd, or inconsistent ways&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more time that I’ve spent programming, the less I trust myself and the more I trust open source solutions which have been developed and vetted by a community.  Also, most of my experience in programming comes from working in teams.  When working in teams the goal is for code to be readable and maintainable.  If you scatter the codebase with versions of functions that have been implemented over and over again elsewhere (almost certainly in a better way), you’re generally just spending extra time and slowing others down.&lt;/p&gt;

&lt;p&gt;Of course there’s nothing wrong with enjoying the challenge of writing your own algorithms!  I just think it’s much better done in https://exercism.io rather than your codebase.&lt;/p&gt;

&lt;h2 id=&quot;being-fair-to-javascript&quot;&gt;Being fair to Javascript&lt;/h2&gt;

&lt;p&gt;All of the above said, Javascript has come a long way in recent years.  Some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I love the fact that I can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{a: 'b', ...obj}&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.merge({a: 'b'}, obj)&lt;/code&gt; (as long as it’s not part of a larger flow which works better as a Lodash chain)&lt;/li&gt;
  &lt;li&gt;I often want to return the unique items from an array, and so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[...new Set(array)]&lt;/code&gt; provides a reasonably readable solution (if only slightly more verbose and less obvious than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.uniq(array)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;In ES2019 arrays now have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap()&lt;/code&gt; functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;Lodash is self-consistent and holistically designed.  “The principle of least astonishment” is a way to not get bogged down in details, be less prone to errors, and increase overall developer happiness.  When bringing in a new developer it’s easier for them to come up-to-speed quickly.&lt;/p&gt;

&lt;p&gt;And my favorite response to “You Don’t Need Lodash”:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I guess not, but I want it. &amp;quot;You don&amp;#39;t need Lodash/Underscore&amp;quot; &lt;a href=&quot;https://t.co/keLJ43U0pa&quot;&gt;https://t.co/keLJ43U0pa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tero Parviainen (@teropa) &lt;a href=&quot;https://twitter.com/teropa/status/692280179666898944?ref_src=twsrc%5Etfw&quot;&gt;January 27, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Brian Underwood</name></author><category term="javascript" /><category term="javascript" /><summary type="html">I love Lodash, but I’m not here to tell you to use Lodash. It’s up to you to decide if a tool is useful for you or your project. It will come down to the needs of the project (file size, browser/Node.js, how much you use it, etc…). But my new team was surprised by my passion for it and so I wanted to share my thoughts. Specifically: I want to focus in this post on those things which I like, including things which I think people often miss.</summary></entry><entry><title type="html">Structuring an Elixir+Phoenix App</title><link href="http://localhost:4000/elixir/2020/07/11/structuring-an-elixir+phoenix-app" rel="alternate" type="text/html" title="Structuring an Elixir+Phoenix App" /><published>2020-07-11T00:00:00+02:00</published><updated>2020-07-11T00:00:00+02:00</updated><id>http://localhost:4000/elixir/2020/07/11/structuring-an-elixir+phoenix-app</id><content type="html" xml:base="http://localhost:4000/elixir/2020/07/11/structuring-an-elixir+phoenix-app">&lt;p&gt;I’ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix phx.new&lt;/code&gt; ed many applications and when doing so I often start with wondering how to organize my code. I love how Phoenix pushes you to think about the different domains in your app via generators while at the same time I have the freedom to organize modules on my own. Ecto schemas make for a nice abstraction, but where should I put code related just to that table? It could be in the context, but I don’t want the context to become a “grab bag” of unorganized function calls.&lt;/p&gt;

&lt;p&gt;In the past, I’ve searched for someone writing on the subject but haven’t come up with much. I’ve even done some cursory glancing into repositories to get a feeling for what they do, but I’ve never looked thoroughly at different options. In this post, I share what I have found from four different open source Phoenix+Ecto applications. And as the old joke goes, I’ll be asking four developers for their opinions and getting four different answers. In the end, I’ll summarize how I plan to move forward.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;p&gt;Phoenix has evolved in how modules are organized, most notably splitting into &lt;a href=&quot;https://hexdocs.pm/phoenix/directory_structure.html#content&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app_web&lt;/code&gt;&lt;/a&gt; folders and with the concept of &lt;a href=&quot;https://hexdocs.pm/phoenix/contexts.html&quot;&gt;contexts&lt;/a&gt;. Some of these applications were created with early versions of Phoenix which could explain some of the differences.&lt;/p&gt;

&lt;p&gt;When I say “typical Ecto schema logic” below, I’m referring to examples in the &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.Schema.html&quot;&gt;Ecto documentation&lt;/a&gt; and the community on the things to put into schema files (field definitions, schema attributes (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@primary_key&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@schema_prefix&lt;/code&gt;, etc…), and changeset logic)&lt;/p&gt;

&lt;h2 id=&quot;avia&quot;&gt;Avia&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aviacommerce/avia/&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; “open source e-commerce framework”&lt;/p&gt;

&lt;p&gt;A lot of the business logic can be found under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/snitch_core/lib/core&lt;/code&gt;. There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; folder containing what appears to be the front-end API modules (what Phoenix might call “contexts”). Next to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; folder is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; folder containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schema&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; directories.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schema&lt;/code&gt; directory contains typical Ecto schema files. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; directory contains correspondingly named modules with CRUD functions (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;) but also occasionally some helper functions related to those domain objects (functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formatted_list&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_all_by_shipping_category&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Each type of module also has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; statement at the top (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Snitch.Data.Model&lt;/code&gt;) referring to a module containing shared logic. It’s worth looking at what that shared logic is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # apps/snitch_core/lib/core/domain/domain.ex
    alias Ecto.Multi
    alias Snitch.Data.{Model, Schema}
    alias Snitch.Domain
    alias Snitch.Core.Tools.MultiTenancy.Repo

    # apps/snitch_core/lib/core/data/model/model.ex
    import Ecto.Query
    alias Snitch.Core.Tools.MultiTenancy.Repo
    alias Snitch.Tools
    alias Tools.Helper.Query, as: QH

    # apps/snitch_core/lib/core/data/schema/schema.ex
    use Ecto.Schema
    import Ecto.Changeset
    import Snitch.Tools.Validations
    alias Snitch.Core.Tools.MultiTenancy.Repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The domain modules alias the model modules and the model modules alias the schema modules, indicating the usage pattern of going deeper (Domain -&amp;gt; Model -&amp;gt; Schema):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # apps/snitch_core/lib/core/domain/stock/stock_location.ex
    alias Model.StockLocation, as: StockLocationModel

    # apps/snitch_core/lib/core/data/model/stock/stock_location.ex
    alias Snitch.Data.Schema.StockLocation, as: StockLocationSchema
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thechangelog/changelog.com&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; This is the CMS behind &lt;a href=&quot;https://changelog.com/&quot;&gt;changelog.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The business logic is under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/changelog&lt;/code&gt;. This directory seems to contain various modules as well as directories containing grouped functionality. All of the Ecto logic looks to be under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schema&lt;/code&gt; directory which contains some base schema modules as well as directories containing grouped schema functionality.&lt;/p&gt;

&lt;p&gt;Schemas have the typical Ecto schema logic but also sometimes many helpers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admins&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_email&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_by_website&lt;/code&gt; which are scoping/querying as well as defining changeset functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth_changeset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin_insert_changeset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin_update_changeset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_changeset&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;The schemas use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Changelog.Schema&lt;/code&gt; module which, in addition to adding many helper functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any?&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;by_position&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newest_first&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newest_last&lt;/code&gt;, etc…, does this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    use Ecto.Schema
    use Arc.Ecto.Schema

    import Ecto
    import Ecto.Changeset
    import Ecto.Query, only: [from: 1, from: 2]
    import EctoEnum, only: [defenum: 2]

    alias Changelog.{Hashid, Repo}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hexpm&quot;&gt;Hexpm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hexpm/hexpm&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; API server and website for Hex &lt;a href=&quot;https://hex.pm/&quot;&gt;https://hex.pm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/hexpm&lt;/code&gt; directory contains some modules with basic logic, but the schemas and contexts exist inside of grouping folders. For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/hexpm/accounts&lt;/code&gt; folder has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; schema and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt; context as well as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization&lt;/code&gt; schema and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organizations&lt;/code&gt; context. The singular modules (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Organization&lt;/code&gt;) have the typical Ecto schema logic.&lt;/p&gt;

&lt;p&gt;The two types of module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Schema&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Context&lt;/code&gt; modules:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # lib/hexpm/schema.ex
    import Ecto
    import Ecto.Changeset
    import Ecto.Query, only: [from: 1, from: 2]
    import Hexpm.Changeset
    alias Ecto.Multi

    use Hexpm.Shared

    # lib/hexpm/context.ex
    import Ecto
    import Ecto.Changeset
    import Ecto.Query, only: [from: 1, from: 2]

    import Hexpm.Accounts.AuditLog,
      only: [audit: 3, audit: 4, audit_many: 4, audit_with_user: 4]

    alias Ecto.Multi
    alias Hexpm.Repo

    use Hexpm.Shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might have noticed that both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Shared&lt;/code&gt; module. This just does a lot of aliases which means that modules like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts.AuditLog&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Repository.Download&lt;/code&gt; become just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuditLog&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;While that pattern seems common, it’s not always the case. There is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auth&lt;/code&gt; module which is just a plain module as well as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserHandles&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Email&lt;/code&gt; schema modules without corresponding context modules. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts.Email&lt;/code&gt; actually seems to be used in the emails folder in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Emails&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Emails.Bamboo&lt;/code&gt;, which seems to be a case of one context reaching into another.&lt;/p&gt;

&lt;h2 id=&quot;elixirstatus-web&quot;&gt;elixirstatus-web&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rrrene/elixirstatus-web&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository description:&lt;/strong&gt; Community site for Elixir project/blog post/version updates&lt;/p&gt;

&lt;p&gt;At the root of this project, there are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web&lt;/code&gt; directories. The schemas are located under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web/models&lt;/code&gt;. This appears to be a pretty old app (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE&lt;/code&gt; file is five years old), which is probably why it’s not using the recent pattern of putting business logic outside of the “web” part of the app.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt; directory contains four schemas (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impression&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Posting&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShortLink&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;) which all define typical Ecto schema logic. These all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use ElixirStatus.Web, :model&lt;/code&gt; which does:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    use Ecto.Schema
    import Ecto
    import Ecto.Changeset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another module under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web/models&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Avatar&lt;/code&gt; which doesn’t seem to be a schema but rather a grouping of helper functions.&lt;/p&gt;

&lt;p&gt;As an example of an context-like module, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impressionist&lt;/code&gt; module (stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/elixir_status/impressionist.ex&lt;/code&gt;) defines various querying methods for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impression&lt;/code&gt; schema along with some other helpers.&lt;/p&gt;

&lt;h2 id=&quot;my-thoughts&quot;&gt;My thoughts:&lt;/h2&gt;

&lt;p&gt;I already like Phoenix conventions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separating business logic from the web application logic&lt;/li&gt;
  &lt;li&gt;Separating business logic into contexts with well-established APIs&lt;/li&gt;
  &lt;li&gt;Ecto schema modules which are focused on mapping and validation of the data source
Things I like about these projects:&lt;/li&gt;
  &lt;li&gt;It’s very nice to have modules headed with something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use MyApp.Schema&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use MyApp.Context&lt;/code&gt; as the Hexpm project does. Even if the used module doesn’t do much, it provides an at-a-glance label when browsing files.&lt;/li&gt;
  &lt;li&gt;I like that Hexpm has established a bit of a convention around schemas (singular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;) vs contexts (plural &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;I like how the Avia project separates “domain”, “model”, and “schema”. In particular as a fan of &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt; using the word “domain” is nice and I think it’s used in the same way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things I don’t like from these projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aliasing the right-most module in a path (as the Avia project does) drops it’s context. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts.AuditLog&lt;/code&gt; is aliased as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuditLog&lt;/code&gt;, that might not be so bad because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuditLog&lt;/code&gt; is potentially a unique concept. But aliasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Repository.Download&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt; could confuse. If you alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Accounts&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hexpm.Repository&lt;/code&gt; you can refer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accounts.AuditLog&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository.Download&lt;/code&gt; which I find clearer.&lt;/li&gt;
  &lt;li&gt;In the Avia project sometimes there are aliases like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.StockLocation&lt;/code&gt; aliased as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StockLocationModel&lt;/code&gt;. I would find it simpler to just refer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.StockLocation&lt;/code&gt; which is one character longer but makes the source clearer.&lt;/li&gt;
  &lt;li&gt;In hexpm the schema vs context convention doesn’t help when browsing a directory to distinguish schemas from plain module files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a long-time Rails developer, one thing that makes Rails nice is being able to go between apps easily because there is always a place for everything. But as an app grows large, grouping files by type means that directories like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controllers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt; get very full. The Phoenix project, I think trying to learn from Rails, encourages using contexts with well-defined APIs. Since each context often needs to solve different problems (such as wrapping a database, creating an API client, or just doing calculations), these can be structured however you like. But when it makes sense I think that we could create directories according to conventions to organize our code. For a long time, many projects have established loose conventions with directories like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;. In the web part of a Phoenix application, we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controller&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;We could do the same in the very common case where our contexts contain Ecto database logic. We are given the “schema” idea from Ecto itself as a way to separate transformation and validation logic. This helps us trim the fat from our “fat model” problem. But we’re left to put other query logic either into our schema or to have it mixed it with all of our context’s business logic.&lt;/p&gt;

&lt;p&gt;So after my investigation, the way that I plan to move forward:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # The context's public API, headed with `use MyApp.Context`
    my_app/&amp;lt;context&amp;gt;.ex

    # Headed with `use MyApp.Schema`
    my_app/&amp;lt;context&amp;gt;/schema/user.ex

    # Headed with `use MyApp.Query`
    my_app/&amp;lt;context&amp;gt;/query/user.ex

    # For non-DB business logic
    my_app/&amp;lt;context&amp;gt;/&amp;lt;some_module&amp;gt;.ex
    my_app/&amp;lt;context&amp;gt;/&amp;lt;some_module&amp;gt;/&amp;lt;sub_module&amp;gt;.ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These things might certainly change, but having looked through some other codebases and reflecting on what I like and don’t like, I think that this will be a good start.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><category term="phoenix" /><summary type="html">I’ve mix phx.new ed many applications and when doing so I often start with wondering how to organize my code. I love how Phoenix pushes you to think about the different domains in your app via generators while at the same time I have the freedom to organize modules on my own. Ecto schemas make for a nice abstraction, but where should I put code related just to that table? It could be in the context, but I don’t want the context to become a “grab bag” of unorganized function calls.</summary></entry><entry><title type="html">Expecting the Unexpected in Elixir</title><link href="http://localhost:4000/elixir/2020/01/31/expecting-the-unexpected-in-elixir" rel="alternate" type="text/html" title="Expecting the Unexpected in Elixir" /><published>2020-01-31T00:00:00+01:00</published><updated>2020-01-31T00:00:00+01:00</updated><id>http://localhost:4000/elixir/2020/01/31/expecting-the-unexpected-in-elixir</id><content type="html" xml:base="http://localhost:4000/elixir/2020/01/31/expecting-the-unexpected-in-elixir">&lt;p&gt;&lt;strong&gt;What can a 50 year old cryptic error message teach us about the software we write today?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 800px; margin: 0 auto;&quot; src=&quot;/assets/expecting_the_unexpected/rocket.jpg&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;em&gt;Apollo 11's Saturn V rocket on the launchpad at the Kennedy Space Center. 1 July 1969. Photo: &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Apollo_11_Saturn_V_on_the_pad_at_the_Kennedy_Space_Center.jpg&quot;&gt;NASA&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-posted from &lt;a href=&quot;https://medium.com/fishbrain/expecting-the-unexpected-in-elixir-a24deb06b5a6&quot;&gt;Medium&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On July 24, 1969 Neil Armstrong and Buzz Aldrin were attempting to land on the moon for the first time in human history. As you might expect it was a tense situation. Of course it was just then that they got what every computer user hates to get… a cryptic error code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Neil Armstrong: PROGRAM ALARM.
Mission Control: It’s looking good to us. Over.
Neil Armstrong: It’s a 1202.
Buzz Aldrin: 1202.

(14 seconds later…)

Neil Armstrong: Give us a reading on the 1202 PROGRAM ALARM.
Mission Control: Roger. We got — We’re GO on that alarm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.hq.nasa.gov/alsj/a11/a11transcript_tec.html&quot;&gt;Apollo 11 — Technical Air-To-Ground Voice Transcription&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unhelpfully, the error (along with a related 1201 error) continued to pop up in the minutes before landing as Armstrong focused on piloting. As they finally touched down the error was forgotten and they prepared to take their giant leap for mankind. But what was the mysterious error?&lt;/p&gt;

&lt;h2 id=&quot;expecting-the-unexpected&quot;&gt;Expecting the Unexpected&lt;/h2&gt;

&lt;p&gt;Some months back I wanted to give a brief presentation at our local Stockholm Elixir meetup group. As Scenic (a application user interface library) had been recently released it was a perfect opportunity to learn something new while hanging out with other Alchemists. When thinking of what to do with Scenic, I decided that I wanted to integrate with one of my favorite games: Kerbal Space Program. After all, why have only one challenge when you can have two instead?&lt;/p&gt;

&lt;p&gt;Kerbal Space Program is a game that gives you a small space center and the opportunity to try rocket science for yourself (be ready for lots of explosions). From the community of its fans we also get the kRPC plugin which allows other programs to interface with the game’s internal APIs using Protocol Buffers. This was just what I needed to implement a Kerbal Space Program dashboard demo.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 800px; margin: 0 auto;&quot; src=&quot;/assets/expecting_the_unexpected/dashboard.png&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;em&gt;The Demo Dashboard Interface&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;As part of the Apollo program, the MIT Instrumentation Laboratory was tasked with designing the Apollo Guidance Computer. For that the team exhaustively tested the computer and the mission programs to make sure there would always be capacity. Fortunately the computer was also designed so that if it did exceed capacity it would restart and pick back up where it left off. The 1202 / 1201 errors were indications of this happening.&lt;/p&gt;

&lt;p&gt;While you may never build something as important as the Apollo Guidance Computer, users of your software would prefer that it Just Worked. Fortunately with Elixir we are given the tools which allow us to give our users just as seamless of an experience.&lt;/p&gt;

&lt;p&gt;In creating my demo I realized that Scenic and Kerbal Space Program would make a great demonstration on how to design for failure in (mock) life-critical situations. Since Scenic uses supervisors for its components it’s designed to fail and recover seamlessly. Perfect to visually demonstrate designing for failure.&lt;/p&gt;

&lt;h2 id=&quot;integrating-with-scenic-and-krpc&quot;&gt;Integrating with Scenic and kRPC&lt;/h2&gt;

&lt;p&gt;When I researched Elixir solutions to work with kRPC I found the &lt;a href=&quot;https://github.com/FiniteMonkeys/jooce&quot;&gt;jooce&lt;/a&gt; project. This project had some good example code which I looked through, though when I tried running the code it didn’t work. After quite a lot of struggling I found that it seemed to have been designed for an older version of the kRPC plugin. Because of this I ended up building my own (very simple) interface using &lt;a href=&quot;https://github.com/bitwalker/exprotobuf&quot;&gt;exprotobuf&lt;/a&gt;. This worked, more or less, though I needed to use a specific branch of the Erlang gpb (Google Protobuf) library from CraigCottingham’s fork which fixed a bug I was experiencing.&lt;/p&gt;

&lt;p&gt;All of this worked fine and you can see the code &lt;a href=&quot;https://gitlab.com/cheerfulstoic/ksp_scenic_dashboard/blob/master/lib/krpc.ex&quot;&gt;here&lt;/a&gt;, but more recently I found the &lt;a href=&quot;https://github.com/wisq/space_ex&quot;&gt;space_ex&lt;/a&gt; Elixir library. This probably would have been an ideal solution if I had found it when I was putting together my demo project.&lt;/p&gt;

&lt;p&gt;Once I was able to integrate kRPC, I needed to be able to display the dashboard. In Scenic you create a hierarchy of components representing more and more focused parts of your UI. The components are Elixir processes and can receive messages which may change the state of the components and cause the display to be refreshed. I was able to use the &lt;a href=&quot;https://github.com/boydm/scenic_sensor&quot;&gt;scenic_sensor&lt;/a&gt; library to create another supervised hierarchy of to hold my “sensors”. These sensors would simply send themselves messages to loop every 200 milliseconds at which point they could query the game and then send the latest readings to the Scenic components. The supervision tree looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 800px; margin: 0 auto;&quot; src=&quot;/assets/expecting_the_unexpected/supervision_tree.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I was first testing this out, my components would flash back and forth. After debugging for a while it I found that while each component would set its own value just fine, the Scenic graph that was being used was always the initial one. Therefore each change reflected only the most recent sensor. Fortunately the fix in my project was easy and a simple PR to the &lt;a href=&quot;https://github.com/boydm/scenic_new&quot;&gt;scenic_new&lt;/a&gt; project would help prevent others from running into it.&lt;/p&gt;

&lt;p&gt;With the UI updating smoothly, I wanted to be able to simulate failure in the system. I decide to start with each component having a 1% chance of failing on every sensor check. With a check every 200 milliseconds and two sensors refreshing, that means that there should be a failure approximately every 10 seconds! That worked well, though when I would try to scale it up I would get a mess of Elixir backtraces that I had a hard time figuring out. After more struggling I realized that I was hitting the retry limits of the supervisors and they were simply giving up. After a simple update of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_restarts&lt;/code&gt;, I could monitor my sensors without even noticing flickering as things constantly crashed. I was even able to demo it at the meetup!&lt;/p&gt;

&lt;h2 id=&quot;bonus-notes&quot;&gt;Bonus Notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I found this &lt;a href=&quot;https://www.youtube.com/watch?v=Qj2IETkScWA&quot;&gt;video&lt;/a&gt; of somebody simulating the Apollo Guidance Computer to use in my presentation. In includes audio from the astronauts asking about the 1202 alarm&lt;/li&gt;
  &lt;li&gt;For those interested in more information, Vintage Space has a good &lt;a href=&quot;https://www.youtube.com/watch?v=kGD0zEbiDPQ&quot;&gt;video&lt;/a&gt; and &lt;a href=&quot;https://www.discovermagazine.com/the-sciences/apollo-11s-1202-alarm-explained#.W__d35NKh24&quot;&gt;writeup&lt;/a&gt; about the 1201 / 1202 alarms.&lt;/li&gt;
  &lt;li&gt;Aviation Week had an &lt;a href=&quot;https://web.archive.org/web/20180505110204/http://aviationweek.com/blog/dragons-radiation-tolerant-design&quot;&gt;interview&lt;/a&gt; (Wayback Machine link) with John Muratore at SpaceX discussing how they make radiation-tolerant hardware (which double checks it’s work and restarts as needed)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Brian Underwood</name></author><category term="elixir" /><category term="elixir" /><summary type="html">What can a 50 year old cryptic error message teach us about the software we write today?</summary></entry><entry><title type="html">Analyzing Ruby Code with Neo4j</title><link href="http://localhost:4000/ruby/rails/neo4j/2016/01/11/analyzing_ruby_code_with_Neo4j" rel="alternate" type="text/html" title="Analyzing Ruby Code with Neo4j" /><published>2016-01-11T18:09:00+01:00</published><updated>2016-01-11T18:09:00+01:00</updated><id>http://localhost:4000/ruby/rails/neo4j/2016/01/11/analyzing_ruby_code_with_Neo4j</id><content type="html" xml:base="http://localhost:4000/ruby/rails/neo4j/2016/01/11/analyzing_ruby_code_with_Neo4j">&lt;p&gt;For a long time I’ve been wanting to use Neo4j as a tool to analyze Ruby code.  Using Ruby for almost a decade, I have a lot of experience with effectively finding my way around Ruby code.  Still Ruby programs can by very dynamic and thus tools are always welcome.  As I’ve begun to use Neo4j I’ve been inspired by code analysis tools such as &lt;a href=&quot;http://mlsec.org/joern/&quot;&gt;joern&lt;/a&gt; and &lt;a href=&quot;http://jqassistant.org/&quot;&gt;jQAssistant&lt;/a&gt; as well as Aaron Patterson’s &lt;a href=&quot;http://tenderlove.github.io/heap-analyzer/&quot;&gt;heap-analyzer&lt;/a&gt;.  In that spirit I’d like to announce a new project called &lt;a href=&quot;https://github.com/neo4jrb/neolytics&quot;&gt;Neolytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neolytics is a Ruby gem which records the execution of a block of Ruby code in a Neo4j database.  There are three major things which it records:&lt;/p&gt;

&lt;h3 id=&quot;each-step-of-the-execution&quot;&gt;Each step of the execution&lt;/h3&gt;

&lt;p&gt;This is thanks to Ruby’s excellent &lt;a href=&quot;http://ruby-doc.org/core-2.0.0/TracePoint.html&quot;&gt;TracePoint&lt;/a&gt; class.  TracePoint gives a hook into each execution step of Ruby code so that we can record line executions, method calls/returns, and raising of executions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/trace_point_flow.png&quot; alt=&quot;TracePoint flow model&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;objects-which-are-found-along-the-way&quot;&gt;Objects which are found along the way&lt;/h3&gt;

&lt;p&gt;For each trace point Neolytics finds:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the object which is the context of the TracePoint&lt;/li&gt;
  &lt;li&gt;objects which are passed as arguments (if a call)&lt;/li&gt;
  &lt;li&gt;objects which are returned (if a return)&lt;/li&gt;
  &lt;li&gt;objects which are referenced via variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each object the class and module ancestry information is also recursively imported.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/trace_point_objects.png&quot; alt=&quot;TracePoint objects&quot; style=&quot;width: 49%; float: left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/object_relationships.png&quot; alt=&quot;Object space model&quot; style=&quot;width: 49%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-syntax-trees-of-all-ruby-code-files-involved-in-the-execution&quot;&gt;Abstract syntax trees of all Ruby code files involved in the execution&lt;/h3&gt;

&lt;p&gt;With thanks to the &lt;a href=&quot;https://github.com/whitequark/parser&quot;&gt;parser&lt;/a&gt; gem!  Additionally method definitions in the AST are linked to their corresponding TracePoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/ast.png&quot; alt=&quot;Abstract Syntax Tree model&quot; style=&quot;width: 49%&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/neo4jrb/neolytics/master/examples/model/trace_point_ast_nodes.png&quot; alt=&quot;TracePoint AST Link&quot; style=&quot;width: 49%; vertical-align: top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To record the data, I used my &lt;a href=&quot;https://github.com/neo4jrb/neo4apis&quot;&gt;neo4apis&lt;/a&gt; gem to send data to Neo4j efficiently without a lot of round trips to the database.&lt;/p&gt;

&lt;p&gt;Lastly, I’ve built a &lt;a href=&quot;https://github.com/neo4j-examples/ruby_code_analytics&quot;&gt;ruby_code_analytics&lt;/a&gt; Rails application to give a UI to examine the results of the dump.  You can see an example running &lt;a href=&quot;https://ruby-neo4j-code-analysis.herokuapp.com&quot;&gt;on Heroku&lt;/a&gt; which is a record of the following simple Ruby code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;

neo4j_session = Neo4j::Session.open(:server_db, neo4j_url)
Neolytics.record_execution(neo4j_session) do
  doc = Nokogiri::HTML(open('https://www.google.com').read)
  doc.xpath('//form/input').map(&amp;amp;:name)
end

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;querying-the-data&quot;&gt;Querying the data&lt;/h2&gt;

&lt;p&gt;Let’s look at some examples of things that you can do with the data from neolytics!&lt;/p&gt;

&lt;h3 id=&quot;examining-the-execution&quot;&gt;Examining the execution&lt;/h3&gt;

&lt;p&gt;Let’s say that we want to know what goes on during the execution of a method.  With the following query we grab the first TracePoint which was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; event and find the entire series of TracePoints until the method is returned from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (call_tp:TracePoint {event: 'call'})
WITH call_tp LIMIT 1
MATCH path=shortestPath((call_tp)-[:NEXT*]-&amp;gt;(return_tp:TracePoint {event: 'return'}))
RETURN path

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visually we can see the query like this:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;a href=&quot;/assets/neolytics/method_call_chain.png&quot;&gt;&lt;img src=&quot;/assets/neolytics/method_call_chain.png&quot; style=&quot;width: 800px&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;In this case the method is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#plural&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_support&lt;/code&gt; gem which lets you pluralize strings.  You can compare the graph database model with the actual source code &lt;a href=&quot;https://github.com/rails/rails/blob/v4.2.5/activesupport/lib/active_support/inflector/inflections.rb#L105&quot;&gt;here on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, each node is displaying a TracePoint event (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;line&lt;/code&gt;, etc…), the class and method in question, and the line number.  Starting from the node on the left you can follow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NEXT&lt;/code&gt; relationships to see each point in the execution.  Note that every node has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HAS_PARENT&lt;/code&gt; relationship back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; TracePoint, so we can see that this method didn’t make any further method calls (at least no Ruby calls.  We see some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_call&lt;/code&gt; events which TracePoint doesn’t expose).  Lastly note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STARTED_AT&lt;/code&gt; relationship from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; event to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; event which is there as a convenience for any query that need to get both nodes at once (e.g. if you need to get both the arguments and the return value of a method).&lt;/p&gt;

&lt;p&gt;For more details you can see &lt;a href=&quot;https://github.com/neo4jrb/neolytics/blob/master/examples/output/plural_trace_points.csv&quot;&gt;this example tabular output&lt;/a&gt; of the tracepoints.&lt;/p&gt;

&lt;h3 id=&quot;running-code-metrics&quot;&gt;Running code metrics&lt;/h3&gt;

&lt;p&gt;Let’s run a query to evaluate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;cyclomatic complexity&lt;/a&gt; of our methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (def:ASTNode {type: 'def'})
OPTIONAL MATCH (def)&amp;lt;-[:HAS_PARENT*]-(condition:ASTNode)
WHERE condition.type IN ['begin', 'if', 'while', 'until', 'for', 'rescue', 'when', 'and', 'or']
RETURN def.name, def.file_path, def.first_line, count(condition)
ORDER BY count(condition) DESC
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a straightforward listing of methods, where to find them, and their complexity score, all ordered with the most complex methods at the top:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;method&lt;/th&gt;
      &lt;th&gt;Path and line&lt;/th&gt;
      &lt;th&gt;complexity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;initialize_pattern&lt;/td&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/uri/rfc2396_parser.rb:342&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;validate&lt;/td&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/rubygems/specification.rb:2453&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;perform_arguments&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sass-3.4.20/lib/sass/tree/visitors/perform.rb:14&lt;/td&gt;
      &lt;td&gt;57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;_next_token&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/nokogiri-1.6.7/lib/nokogiri/css/tokenizer.rb:55&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parse&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/tzinfo-1.2.2/lib/tzinfo/zoneinfo_timezone_info.rb:95&lt;/td&gt;
      &lt;td&gt;55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pretty_print&lt;/td&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/pp.rb:421&lt;/td&gt;
      &lt;td&gt;53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;merge_final_ops&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sass-3.4.20/lib/sass/selector/sequence.rb:342&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;call&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sprockets-3.5.2/lib/sprockets/server.rb:22&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;convert_input&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/erubis-2.7.0/lib/erubis/converter.rb:127&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;visit_rule&lt;/td&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sass-3.4.20/lib/sass/tree/visitors/to_css.rb:280&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now let’s extend this complexity metric by using the TracePoint data to see how long each method actually took:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;

MATCH (tp:TracePoint)
WITH sum(tp.execution_time) AS total_execution_time

MATCH (node:ASTNode {type: 'def'})
OPTIONAL MATCH (node)&amp;lt;-[:HAS_PARENT*]-(condition:ASTNode)
WHERE condition.type IN ['begin', 'if', 'while', 'until', 'for', 'rescue', 'when', 'and', 'or']
WITH node, count(condition) AS complexity, total_execution_time

MATCH (node)&amp;lt;-[:HAS_AST_NODE]-(tp:TracePoint)&amp;lt;-[:STARTED_AT]-(return_tp:TracePoint)

WITH
  complexity,
  total_execution_time,
  tp.path + ':' + tp.lineno + ' (' + return_tp.defined_class + '#' + return_tp.method_id + ')' AS method,
  count(tp) AS executions,
  sum(return_tp.execution_time) AS total_method_execution_time

RETURN
  method,
  complexity AS cc,
  executions AS execs,
  total_method_execution_time AS total_time,
  100.0 * (total_method_execution_time / total_execution_time) AS percentage_of_total_time,
  total_method_execution_time / executions AS avg_exec

ORDER BY total_method_execution_time DESC
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this we get a nice table of methods which take the most time, along with the cyclomatic complexity.  We can sort by either metric or create a combined metric of our own in order to determine which methods might be ripe for refactoring.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;method&lt;/th&gt;
      &lt;th&gt;cc&lt;/th&gt;
      &lt;th&gt;execs&lt;/th&gt;
      &lt;th&gt;total_time&lt;/th&gt;
      &lt;th&gt;% total time&lt;/th&gt;
      &lt;th&gt;avg_exec&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;…/rubies/ruby-2.2.3/lib/ruby/2.2.0/set.rb:289 &lt;br /&gt;&lt;strong&gt;Set#add&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2343&lt;/td&gt;
      &lt;td&gt;11457&lt;/td&gt;
      &lt;td&gt;2.31&lt;/td&gt;
      &lt;td&gt;4.89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/activesupport-4.2.5/lib/active_support/inflector/methods.rb:91 &lt;br /&gt;&lt;strong&gt;ActiveSupport::Inflector#underscore&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;237&lt;/td&gt;
      &lt;td&gt;5057&lt;/td&gt;
      &lt;td&gt;1.02&lt;/td&gt;
      &lt;td&gt;21.34&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:27 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#match&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;810&lt;/td&gt;
      &lt;td&gt;4917&lt;/td&gt;
      &lt;td&gt;0.99&lt;/td&gt;
      &lt;td&gt;6.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:43 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#command_options&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;641&lt;/td&gt;
      &lt;td&gt;3790&lt;/td&gt;
      &lt;td&gt;0.76&lt;/td&gt;
      &lt;td&gt;5.91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:177 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#command_regex&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;510&lt;/td&gt;
      &lt;td&gt;3722&lt;/td&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;7.30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:185 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#convert_to_regex&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1020&lt;/td&gt;
      &lt;td&gt;3537&lt;/td&gt;
      &lt;td&gt;0.71&lt;/td&gt;
      &lt;td&gt;3.47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/activesupport-4.2.5/lib/active_support/dependencies/autoload.rb:35 &lt;br /&gt;&lt;strong&gt;ActiveSupport::Autoload#autoload&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
      &lt;td&gt;3186&lt;/td&gt;
      &lt;td&gt;0.64&lt;/td&gt;
      &lt;td&gt;13.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/sprockets-3.5.2/lib/sprockets/utils.rb:33 &lt;br /&gt;&lt;strong&gt;Sprockets::Utils#hash_reassoc1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;115&lt;/td&gt;
      &lt;td&gt;2366&lt;/td&gt;
      &lt;td&gt;0.48&lt;/td&gt;
      &lt;td&gt;20.57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/activesupport-4.2.5/lib/active_support/core_ext/module/delegation.rb:151 &lt;br /&gt;&lt;strong&gt;Module#delegate&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
      &lt;td&gt;1164&lt;/td&gt;
      &lt;td&gt;0.23&lt;/td&gt;
      &lt;td&gt;27.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…/gems/ruby-2.2.3/gems/pry-0.10.3/lib/pry/command.rb:37 &lt;br /&gt;&lt;strong&gt;#&amp;lt;Class:Pry::Command&amp;gt;#description&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;152&lt;/td&gt;
      &lt;td&gt;1158&lt;/td&gt;
      &lt;td&gt;0.23&lt;/td&gt;
      &lt;td&gt;7.62&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;more-options&quot;&gt;More options&lt;/h2&gt;

&lt;p&gt;There are many ways to use this data model to debug and otherwise analyze our code.  I’ve provided some more sample queries in &lt;a href=&quot;https://github.com/neo4jrb/neolytics&quot;&gt;the README&lt;/a&gt; for the neolytics gem.  I’ve also started &lt;a href=&quot;https://github.com/neo4j-examples/ruby_code_analytics/labels/idea%20for%20query&quot;&gt;a list of ideas&lt;/a&gt; for new queries which could be made.  These could be used directly or perhaps built into a reporting feature of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby_code_analytics&lt;/code&gt; Rails application.  I’m excited to see where things could go!&lt;/p&gt;

&lt;p&gt;Analysis app running on Heroku: &lt;a href=&quot;https://ruby-neo4j-code-analysis.herokuapp.com&quot;&gt;https://ruby-neo4j-code-analysis.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;style&gt;
table {
  border-collapse: collapse;
}
table, th, td {
  border: 1px solid #CCC;
  padding: 0.3em;
}

&lt;/style&gt;</content><author><name>Brian Underwood</name></author><category term="ruby" /><category term="rails" /><category term="neo4j" /><category term="neo4j" /><summary type="html">For a long time I’ve been wanting to use Neo4j as a tool to analyze Ruby code. Using Ruby for almost a decade, I have a lot of experience with effectively finding my way around Ruby code. Still Ruby programs can by very dynamic and thus tools are always welcome. As I’ve begun to use Neo4j I’ve been inspired by code analysis tools such as joern and jQAssistant as well as Aaron Patterson’s heap-analyzer. In that spirit I’d like to announce a new project called Neolytics.</summary></entry><entry><title type="html">GraphStarter: Getting a Neo4j Rails app up and running quickly</title><link href="http://localhost:4000/2015/10/27/graph_starter" rel="alternate" type="text/html" title="GraphStarter: Getting a Neo4j Rails app up and running quickly" /><published>2015-10-27T10:55:00+01:00</published><updated>2015-10-27T10:55:00+01:00</updated><id>http://localhost:4000/2015/10/27/graph_starter</id><content type="html" xml:base="http://localhost:4000/2015/10/27/graph_starter">&lt;p&gt;For a while now I’ve been building various &lt;a href=&quot;http://neo4jrb.io/&quot;&gt;Neo4j.rb&lt;/a&gt; educational resources using the example of an &lt;a href=&quot;http://github.com/neo4j-examples/asset_portal&quot;&gt;asset portal&lt;/a&gt;.  There has been:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a screencast series (the &lt;a href=&quot;http://neo4j.com/blog/create-a-ruby-on-rails-app-with-neo4j-screencast-series/&quot;&gt;first half&lt;/a&gt; and the &lt;a href=&quot;http://neo4j.com/blog/advanced-ruby-on-rails-with-neo4j/&quot;&gt;second half&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;a &lt;a href=&quot;http://www.sitepoint.com/why-you-should-use-neo4j-in-your-next-ruby-app/&quot;&gt;SitePoint article&lt;/a&gt; on building recommendations and access control&lt;/li&gt;
  &lt;li&gt;a &lt;a href=&quot;https://www.youtube.com/watch?v=dlRL-3XZvHs&quot;&gt;webinar&lt;/a&gt; on advanced access control&lt;/li&gt;
  &lt;li&gt;a &lt;a href=&quot;http://neo4j.com/developer/ruby-course/&quot;&gt;introduction course&lt;/a&gt; for Neo4j using Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As part of this process I’ve wanted to use what I’ve been building and allow anybody to easily create a UI for their own assets in Rails.  I’m pleased to say that I’ve got a good start with the &lt;a href=&quot;https://github.com/neo4j-examples/graph_starter&quot;&gt;graph_starter&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; gem is a Rails engine, which means that it can be placed within a Rails application.  The goal is to be able to quickly set up a basic UI for your entities, but to also be able to override it when you want to provide custom logic.&lt;/p&gt;

&lt;p&gt;Setting up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; application is as simple as the following steps:&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; is easy!&lt;/p&gt;

&lt;p&gt;First create a Rails application if you don’t already have one:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new application_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; gem (it will include the Neo4j.rb gems for you):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Gemfile

gem 'graph_starter'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mount the engine:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# config/routes.rb

mount GraphStarter::Engine =&amp;gt; '/'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create some asset models:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# app/models/product.rb

class Product &amp;lt; GraphStarter::Asset
  # `title` property is added automatically

  property :name
  property :description
  property :price, type: Integer

  has_images

  has_one :in, :vendor, type: :SELLS_PRODUCT
end

# app/models/vendor.rb

class Vendor &amp;lt; GraphStarter::Asset
  property :brand_name
  property :code

  name_property :brand_name

  has_many :out, :products, origin: :vendor
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These models are simply Neo4j.rb &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveNode&lt;/code&gt; models so you can refer to the &lt;a href=&quot;http://neo4jrb.readthedocs.org/&quot;&gt;Neo4j.rb documentation&lt;/a&gt; to define them.  They do have some special methods, however, which let you control how GraphStarter works.  In the above &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; model, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_images&lt;/code&gt; has been called to indicate that products have images which defines a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; model along with the neccessary association.  See the &lt;a href=&quot;https://github.com/neo4j-examples/graph_starter#models&quot;&gt;graph_starter README&lt;/a&gt; for documentation on how to configure aspects of your models.&lt;/p&gt;

&lt;p&gt;Once that framework is in place you can define a way to import data, if desired.  For this I would suggest making a rake task:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# lib/tasks/store.rake

namespace :store do
  task :import do
    CSV.open(File.read('vendors.csv')).each do |row|
      Vendor.create(name: row['brand_name'],
                    code: row['code'])
    end

    CSV.open(File.read('products.csv')).each do |row|
      product = Product.create(name: row['name'],
                               description: row['description'],
                               price: row['price'].to_i)

      product.vendor = Vendor.find_by(code: row['vendor_code'])
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s all!&lt;/p&gt;

&lt;p&gt;When everything is in place you can simply start up your Rails server (by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails server&lt;/code&gt;) and you get a UI which looks like this example site I made using data from the &lt;a href=&quot;http://www.nhm.ac.uk/&quot;&gt;Natural History Museum&lt;/a&gt; in London:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%; display: block; margin: 0 auto&quot; src=&quot;/assets/graph_starter/assets_index.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%; display: block; margin: 0 auto&quot; src=&quot;/assets/graph_starter/assets_show.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;http://nhm-portal.herokuapp.com/&quot;&gt;browse the app&lt;/a&gt; on Heroku and &lt;a href=&quot;https://github.com/neo4j-examples/nhm_asset_portal&quot;&gt;checkout the repository&lt;/a&gt; on Github&lt;/p&gt;

&lt;p&gt;I’ll be working on a new project to create a &lt;a href=&quot;http://graphgist.neo4j.com/&quot;&gt;GraphGist portal&lt;/a&gt; based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph_starter&lt;/code&gt; gem so I plan to continue improving it!&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="ruby" /><summary type="html">For a while now I’ve been building various Neo4j.rb educational resources using the example of an asset portal. There has been:</summary></entry><entry><title type="html">Using Graph Structure Record Linkage on Irish Census Data with Neo4j</title><link href="http://localhost:4000/2015/08/20/using_graph_structure_record_linkage_on_irish_census_data_with_neo4j" rel="alternate" type="text/html" title="Using Graph Structure Record Linkage on Irish Census Data with Neo4j" /><published>2015-08-20T09:55:00+02:00</published><updated>2015-08-20T09:55:00+02:00</updated><id>http://localhost:4000/2015/08/20/using_graph_structure_record_linkage_on_irish_census_data_with_neo4j</id><content type="html" xml:base="http://localhost:4000/2015/08/20/using_graph_structure_record_linkage_on_irish_census_data_with_neo4j">&lt;p&gt;For just over a year I’ve been obsessed on-and-off with a project ever since I stayed in the town of Skibbereen, Ireland.  Taking data from the &lt;a href=&quot;http://www.census.nationalarchives.ie/&quot;&gt;1901 and 1911 Irish censuses&lt;/a&gt; I hoped I would be able to find a way to reliably link resident records from the two together to identify the same residents.  Since then I’ve learned a bit about &lt;a href=&quot;/tag/master-data-management&quot;&gt;master data management and record linkage&lt;/a&gt; and so I thought I would give it another stab.  Here I’d like to talk about how I’ve been matching records based on the local data space around objects to improve my record linkage scoring.&lt;/p&gt;

&lt;p&gt;The data model of the imported data is very linear:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 100%; display: block; margin: 0 auto&quot; src=&quot;/assets/neo4j-mdm/irish_census_wrah.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post, however, I’m going to be focusing on Houses and Residents and creating relationships between them based on their properties.&lt;/p&gt;

&lt;h2 id=&quot;relations-to-the-head&quot;&gt;Relations to the Head&lt;/h2&gt;

&lt;p&gt;To view an example of what a census record from 1911 Ireland looks like you can have a look at the McCarthys of &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1901/Cork/Cloghdowell/Barnagowlane/1154382/&quot;&gt;1901&lt;/a&gt; and &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1911/Cork/Cloghdonnell/Barnagowlane/440559/&quot;&gt;1911&lt;/a&gt;.  Charles is the head of the family with his wife Hannah, mother Ellen, children (two in 1901 and seven in 1911), and a servant (Timothy Walsh in 1901 and William Regan in 1911).&lt;/p&gt;

&lt;style&gt;
table {
  border-collapse: collapse;
  margin: 0 auto !important;
}
table, th, td {
  border: 1px solid #CCC;
  padding: 0.3em;
}
&lt;/style&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td style=&quot;font-weight: 0.8em; font-weight: bold; text-align: center&quot;&gt;
      &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1901/Cork/Cloghdowell/Barnagowlane/1154382/&quot;&gt;
        &lt;img style=&quot;width: 350px; display: block; margin: 0 auto&quot; src=&quot;/assets/neo4j-mdm/mccarthy_census_1901.png&quot; /&gt;
        The McCarthy family of Barnagowlane, Cloghdowell, Cork, 1901
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td style=&quot;font-weight: 0.8em; font-weight: bold; text-align: center&quot;&gt;
      &lt;a href=&quot;http://www.census.nationalarchives.ie/pages/1911/Cork/Cloghdonnell/Barnagowlane/440559/&quot;&gt;
        &lt;img style=&quot;width: 350px; display: block; margin: 0 auto&quot; src=&quot;/assets/neo4j-mdm/mccarthy_census_1911.png&quot; /&gt;
        The McCarthy family of Barnagowlane, Cloghdonnell, Cork, 1911
      &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Surname&lt;/th&gt;
      &lt;th&gt;Forename&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Relation to Head&lt;/th&gt;
      &lt;th&gt;Religion&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Surname&lt;/th&gt;
      &lt;th&gt;Forename&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Relation to Head&lt;/th&gt;
      &lt;th&gt;Religion&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Charles&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Head of Family&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Charles&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Head of Family&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Hannah&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Wife&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Hannah&lt;/td&gt;
      &lt;td&gt;35&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Wife&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;William&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;William&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Bridget&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Bridget&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Ellen&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Kate&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Florence&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Charles Peter&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Son&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Annie&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Daughter&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;Ellen&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Mother&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;McCarthy&lt;/td&gt;
      &lt;td&gt;? Ellen&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;Mother&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Walsh&lt;/td&gt;
      &lt;td&gt;Timothy&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Servant&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Regan&lt;/td&gt;
      &lt;td&gt;William&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;Servant&lt;/td&gt;
      &lt;td&gt;Roman Catholic&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The McCarthys are an almost exact match between two census records between 1901 and 1911.  The names, ages, occupations, and relationships all match perfectly.  Unfortunately the story for other records is not so simple.  Many times houses, which to the human eye seem to be the same house, can have wildly varying details.  For example Hannah might go be listed as Hana or Anne in a different census.  Likewise ages vary a lot more than you might think.  In examining the records I regularly found ages varying by a year or two and have even found a few houses with ages off by as much as 10-15 years.&lt;/p&gt;

&lt;p&gt;In both censuses there is a field for residents to fill out called “Relation to Head”.  This gives us information about how each resident is related to the head of the house.  In the case of the McCarthys, Charles is listed as “Head of Fa&lt;D-i&gt;mily&quot; in both years.  The rest of the family has a nice representation of things that we often see in the data: &quot;Wife&quot;, &quot;Son&quot;, &quot;Daughter&quot;, and &quot;Servant&quot;.&lt;/D-i&gt;&lt;/p&gt;

&lt;p&gt;We might be tempted to say “This person was the head in 1901, so they must be the same person who was the head in 1911”.  Often, however, the head of the family can die or retire leaving the roll of head of the family to their wife or child.  Can the “Relation to Head” values still be useful to us to match any given resident from 1901 to another resident in 1911?&lt;/p&gt;

&lt;p&gt;First let’s cover the general the process of record linkage I have been using.  To find a match for a resident I start by using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch&lt;/code&gt; server (which contains a duplicate of my Neo4j census data) to quickly find a list of other residents with a match on very rough criteria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the resident in the other census?&lt;/li&gt;
  &lt;li&gt;Does the sex match (or it it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;)?&lt;/li&gt;
  &lt;li&gt;Is the resident’s age within 15 years of what it would be expected to be in the other census?&lt;/li&gt;
  &lt;li&gt;Does the name match roughly (within an edit distance of 4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This comes back with anywhere from zero to hundreds of results.  I call these “similarity candidates” and for each I create a relationship between the original record and the candidate.&lt;/p&gt;

&lt;p&gt;With this list I can compare the attributes of the two records (using the &lt;a href=&quot;https://rubygems.org/gems/record_linkage&quot;&gt;record_linkage&lt;/a&gt; gem I created) to see how closely they match.  The closer their name, sex, age, etc.. matches, the higher score they get.  Ideally the real match should have the highest score, but that isn’t always true and can take &lt;a href=&quot;http://127.0.0.1:4000/2015/05/14/master_data_management_scoring_examples/&quot;&gt;some tuning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to this simple comparison of attributes, I have now added a process to take advantage of the similarity candidate relationships to compare family relationships.  Let’s start with this example of a sub-graph pattern:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 850px; margin: 0.6em;&quot; src=&quot;/assets/neo4j-mdm/mccarthy_charles_comparison.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The relationship &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHILD_OF&lt;/code&gt; is created whenever there is a “Son” or “Daughter” in the “Realation to Head” field.  Likewise we can create other gender-neutral relationships like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARRIED_TO&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIBLING_OF&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NIECE_NEPHEW_OF&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;In this case the resident in question is the 1901 record for William.  When we are evaluating the 1911 record of William as a potential match we can explore other residents in the same house as evidence of similarity.  The diagram above shows that both records have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHILD_OF&lt;/code&gt; relationship to the two “Charles” records which furthermore are linked via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationship.  Because of this we can say that there is a greater chance that the two “William” records represent the same person.&lt;/p&gt;

&lt;p&gt;This only gives us the ability to find these relationships between the head of the family and other residents.  What about generically matching based on the relationship of any two residents of a house?  Let’s say that Charles died sometime between 1901 and 1911.  If his wife Hannah takes over as the head of the family we would have a sub-graph which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 850px; margin: 0.6em;&quot; src=&quot;/assets/neo4j-mdm/mccarthy_hannah_comparison.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could say that when we have the paths &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&amp;lt;-MARIED_TO-&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&lt;/code&gt; on either side that we can build our case for a match a bit more.  This kind of matching can be used on all of the other residents of the house with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationships.  For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&amp;lt;-CHILD_OF-&lt;/code&gt; could be matched to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-CHILD_OF-&amp;gt;&amp;lt;-CHILD_OF-&lt;/code&gt; even in this case where the wife becomes the head of the house.  Or if a child becomes the head then it could be compared to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-SIBLING_OF-&lt;/code&gt; relationship.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;So how do we actually do this?  First let’s take our sub-graph and turn our nodes into variables:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 850px; margin: 0.6em;&quot; src=&quot;/assets/neo4j-mdm/irish_census_relationship_mapping.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example let’s take resident &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1 r1&lt;/code&gt; (house 1, resident 1) as the resident in question and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h2 r1&lt;/code&gt; as the candidate that we want to compare it to.  This is the sort of query that Neo4j is wonderful at both performing quickly and making easy to formulate.  Let’s look at part of the Ruby code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;

def get_similarity_candidate_relationship_paths
  self.query_as(:h1_r1)
    .match('(h1:House), (h2:House)')
    .match('h1&amp;lt;-[:LIVES_IN]-h1_r1-[sc_1:similarity_candidate]-(h2_r1)-[:LIVES_IN]-&amp;gt;h2')
    .match('h1&amp;lt;-[:LIVES_IN]-h1_r2-[sc_2:similarity_candidate]-(h2_r2)-[:LIVES_IN]-&amp;gt;h2')
    .match('path1=h1_r1-[:born_to|married_to|grandchild_of|niece_nephew_of|sibling_of|cousin_of|child_in_law_of|step_child_of*1..2]-h1_r2')
    .match('path2=h2_r1-[:born_to|married_to|grandchild_of|niece_nephew_of|sibling_of|cousin_of|child_in_law_of|step_child_of*1..2]-h2_r2')
    .pluck(
      :h2_r1,
      'collect([path1, rels(path1), path2, rels(path2)])'
      ).each_with_object({}) do |(r2, data), result|

    result[r2] = data.inject(0) do |total, (path1, rels1, path2, rels2)|
      relations1 = relation_string_from_path_and_rels(path1, rels1)
      relations2 = relation_string_from_path_and_rels(path2, rels2)

      if relations1 == relations2
        1.0
      elsif score = (RELATION_EQUIVILENCE_SCORES[relations1] || {})[relations2]
        score
      else
        -2.0
      end + total
    end
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we start with a Cypher query using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Query&lt;/code&gt; API from neo4j.rb.  The object upon which we’ve called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_similarity_candidate_relationship_paths&lt;/code&gt; is our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1_r1&lt;/code&gt; anchor.  Note here that we match paths with a length of either one or two relationships long from between two residents of the same house.  Then we return all residents found via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationship from our anchor and the family relationship paths aggregated into an Array.&lt;/p&gt;

&lt;p&gt;Once the Cypher query returns data we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relation_string_from_path_and_rels&lt;/code&gt; which is a way of transforming the path into a string like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-BORN_TO-&amp;gt;&amp;lt;-BORN_TO&lt;/code&gt;.  This string gives us a simple way to express the path between the two residents as a string.&lt;/p&gt;

&lt;p&gt;We then can give a score based on the two paths.  If the paths are the same then we say that the score is 1.0.  If the pair of paths is something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-BORN_TO-&amp;gt;&amp;lt;-BORN_TO&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-SIBLING_OF-&amp;gt;&lt;/code&gt; then we can give a score based on a lookup.  We add these scores up to give us a total score comparing our anchor resident and each of it’s similarity candidates.  All with just one query to the database.&lt;/p&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;p&gt;There are a couple of things that I needed to do to make this work:&lt;/p&gt;

&lt;p&gt;Previously I was simply grabbing one resident at a time, finding all of the similarity candidates, and then creating a set of relationships to link the resident with the candidates and to store the record linkage scores (both the individual scores for fields and the total score).  However this approach requires all of the candidates in the house to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIMILARITY_CANDIDATE&lt;/code&gt; relationships in order to compare family relationships.  So I first process all residents for a house to create the similarity candidate relationships and store the record linkage scores and then go through them again with the graph-based comparisons and store that score and update the total.&lt;/p&gt;

&lt;p&gt;Beyond that there is the conceptual problem of determining the scoring when comparing paths.  For example, if somebody was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BORN_TO&lt;/code&gt; the head one year but their spouse takes over as the head, could we say that they’re &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BORN_TO&lt;/code&gt; the spouse if they are are a step-child?  Family relationships are complicated and don’t always fit neatly into our properties and algorithms.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Most record linkage focuses on the properties of an object, but we need to remember that relationships are data about our entities too.  With Neo4j we have a powerful tool for analyzing those relationships natuarally and quickly.  Additionally I have found that the ability to create relationships on the fly to aggregate calculations like the ones discussed above is a wonderful way to find the best solution quickly.&lt;/p&gt;</content><author><name>Brian Underwood</name></author><category term="neo4j" /><category term="master-data-management" /><summary type="html">For just over a year I’ve been obsessed on-and-off with a project ever since I stayed in the town of Skibbereen, Ireland. Taking data from the 1901 and 1911 Irish censuses I hoped I would be able to find a way to reliably link resident records from the two together to identify the same residents. Since then I’ve learned a bit about master data management and record linkage and so I thought I would give it another stab. Here I’d like to talk about how I’ve been matching records based on the local data space around objects to improve my record linkage scoring.</summary></entry></feed>